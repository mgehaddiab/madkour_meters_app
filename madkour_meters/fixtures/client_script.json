[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:01.688518",
  "module": "Madkour Meters APP",
  "name": "Sync Meter",
  "script": "let actionNameSync = __(\"Sync Meter\")\nlet actionData = {}\nlet baseURL = \"https://meter01.utilities-madkour.com\"\nlet loadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t\t// Add Buton\n\t\tfrm.add_custom_button(actionNameSync, function() {\n\t\t    failed (\"Please don't use this oprtion !\",frm.doc.name)\n\t\t    \n\t\t    \n\t\t    if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1 && frappe.user_roles.indexOf(\"Meters Software Support\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name)\n\t           return\n\t       }\n\t       \n\t        /*if(frm.doc.type.includes(\"Electro\") && frappe.user_roles.indexOf(\"Meter Manager Role\") > -1){\n\t            failed (\"Please Contact the Admin !\",frm.doc.name)\n\t           return\n\t            \n\t        }*/\n\t       \n\t       \n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    /*if(!frm.doc.customer){\n\t           \n\t           failed (\"You need to add customer befor performing this action!\",frm.doc.name)\n\t\t        return\n\t           \n\t       }*/\n\t\t    //Show Loading   \n\t\t    loadDialog.show();\n\t\t    \n\t\t    try{\n\t\t    \n    \t\t    //fetch action data\n    \t\t    actionData.meterip = frm.doc.ip\n    \t\t    actionData.meterPort = frm.doc.port\n    \t\t    actionData.metertype = frm.doc.type\n                actionData.meterPassword = \"-a Low -P '\"+frm.doc.password+\"'\"\n                actionData.meterId = frm.doc.sync_meter_id\n                actionData.meterSerial = frm.doc.serial\n                actionData.name = frm.doc.name\n                \n                \n                $.post( baseURL+\"/createMeter\" , actionData).done(function (response) {\n                    success(JSON.stringify(response),\n                        frm.doc.name,response.meterId,actionNameSync);\n                    frm.set_value({\n                        sync_meter_id: response.meterId\n                    }).then(() => {\n                        //TODO Rollback in case of errors\n                        frm.refresh();\n                        frm.save();\n                        \n                    })\n                }).fail(function (jqXHR, textStatus, errorThrown) {\n                    failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                        frm.doc.name );\n                });\n                    \n                }catch(e){\n                    failed (e)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference,actionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: actionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Meter Sync Completed!'),\n    indicator: 'green',\n    message: __('The meter updated/synced successfully')\n});\n    \n    \n    \n}\n\nfunction failed (faileMessage,reference){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: actionNameSync,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:30.558602",
  "module": "Madkour Meters APP",
  "name": "Set Current Time Script",
  "script": "let setTimeActionName = __(\"Set Current Time\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\t\t    \t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t        return\n\t        \n\t    \n\t\t// Add Buton\n\t\tfrm.add_custom_button(setTimeActionName, function() {\n\t\t    \n\n\t\t    \t\t    if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name)\n\t           return\n\t       }\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    //Show Loading   \n\t\t    loadDialog.show();\n\t\t    \n\t\t    try{\n\t\t    \n    \t\t    //fetch action data\n    \t\t    actionData.meterip = frm.doc.ip\n    \t\t    actionData.meterPort = frm.doc.port\n    \t\t    actionData.metertype = frm.doc.type\n                actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                actionData.meterId = frm.doc.sync_meter_id\n                actionData.meterSerial = frm.doc.serial\n                actionData.meterAction = \"SetCurrentTime\"\n                actionData.actionValue = \"Non\"\n                \n                $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                    success(JSON.stringify(response),\n                        frm.doc.name);\n                    \n                    /*frm.set_value({\n                        sync_meter_id: response.meterId\n                    }).then(() => {\n                        //TODO Rollback in case of errors\n                        frm.refresh();\n                        frm.save();\n                        \n                    })*/\n                }).fail(function (jqXHR, textStatus, errorThrown) {\n                    failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                        frm.doc.name );\n                });\n                    \n                }catch(e){\n                    failed (e)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: setTimeActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Meter Time Updated!'),\n    indicator: 'green',\n    message: __('The meter time updated successfully')\n});\n\n    \n}\n\nfunction failed (faileMessage,reference){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: setTimeActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:58:32.594781",
  "module": "Madkour Meters APP",
  "name": "Clear Errors",
  "script": "let clearErrorActionName = __(\"Clear errors\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\t\t    \t   if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t        return\n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(clearErrorActionName, function() {\n\n\t        \n\t\t    \t\t    if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name)\n\t           return\n\t       }\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    //Show Loading   \n\t\t    loadDialog.show();\n\t\t    \n\t\t    try{\n\t\t    \n    \t\t    //fetch action data\n    \t\t    actionData.meterip = frm.doc.ip\n    \t\t    actionData.meterPort = frm.doc.port\n    \t\t    actionData.metertype = frm.doc.type\n                actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                actionData.meterId = frm.doc.sync_meter_id\n                actionData.meterSerial = frm.doc.serial\n                actionData.meterAction = \"ClearErr\"\n                actionData.actionValue = \"Non\"\n                \n                if (actionData.metertype.includes(\"Quill\")){\n                    \n                    actionData.meterAction = \"WriteRegUINT8\"\n                    actionData.actionValue = '1.0.130.130.0.255:0'\n                    \n                    $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                        success(JSON.stringify(response),\n                            frm.doc.name,'',clearErrorActionName);\n                        \n                        /*frm.set_value({\n                            sync_meter_id: response.meterId\n                        }).then(() => {\n                            //TODO Rollback in case of errors\n                            frm.refresh();\n                            frm.save();\n                            \n                        })*/\n                    }).fail(function (jqXHR, textStatus, errorThrown) {\n                        failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                            frm.doc.name, clearErrorActionName);\n                    });\n                    \n                }else{\n                    \n                    $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                        success(JSON.stringify(response),\n                            frm.doc.name,'',clearErrorActionName);\n                        \n                        /*frm.set_value({\n                            sync_meter_id: response.meterId\n                        }).then(() => {\n                            //TODO Rollback in case of errors\n                            frm.refresh();\n                            frm.save();\n                            \n                        })*/\n                    }).fail(function (jqXHR, textStatus, errorThrown) {\n                        failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                            frm.doc.name, clearErrorActionName);\n                    });\n                    \n                }\n                        \n                    }catch(e){\n                        failed (e)\n                    }\n\t\t    \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference,message,action = clearErrorActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action? action : clearErrorActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Meter Erorr Reset!'),\n    indicator: 'green',\n    message: __('The meter errors reset successfully')\n});\n    \n    \n}\n\nfunction failed (faileMessage,reference, action = clearErrorActionName){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action?action:clearErrorActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n\n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:37.532717",
  "module": "Madkour Meters APP",
  "name": "SetRelay Script",
  "script": "let setRelayActionName = __(\"Set Relay Connect/Disconnect\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\t\t    \t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t        return\n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(setRelayActionName, function() {\n\t\t    \n\n\t\t    \n\t\t    if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name)\n\t           return\n\t       }\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: __('Enter details'),\n                    fields: [\n                        {\n                            label: 'Select Required Action',\n                            fieldname: 'param',\n                            fieldtype: 'Select',\n                            options:[\"Connect\",\"Disconnect\"]\n                        }\n                    ],\n                    primary_action_label: __('Submit'),\n                    primary_action(values) {\n                        d.hide();\n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        actionData.meterSerial = frm.doc.serial\n                        actionData.meterAction = \"SetRelay\"\n                        \n                        if(values.param == \"Connect\")\n                            actionData.actionValue = \"Connect\"\n                        if(values.param == \"Disconnect\")\n                            actionData.actionValue = \"Disconnect\"\n                            \n                        $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                            success(JSON.stringify(response),\n                            frm.doc.name,\"Value: \" + response[0]);\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                frm.doc.name );\n                        });\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference,message){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: setRelayActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n    \n    \n}\n\nfunction failed (faileMessage,reference){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: setRelayActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:07.018448",
  "module": "Madkour Meters APP",
  "name": "Read Profile",
  "script": "let readProfileActionName = __(\"Read Profile\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\n\t        \n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(readProfileActionName, function() {\n\t\t    \n\t\t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t            return\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: __('Enter details'),\n                    fields: [\n                        {\n                            label: 'Select Required Profile',\n                            fieldname: 'profile',\n                            fieldtype: 'Select',\n                            options:[\"Consumption\",\"Billing\", \"Daily Billing\", \"Recharges\", \"Error\"]\n                            \n                        },\n                        {\n                            label: 'Select Source',\n                            fieldname: 'source',\n                            fieldtype: 'Select',\n                            options:[\"Meter\",\"System\"],\n                            defult:\"Meter\"\n                            \n                        },\n                        {\n                            label: 'From Date',\n                            fieldname: 'from',\n                            fieldtype: 'Datetime'\n                            \n                        },\n                        {\n                            label: 'To Date',\n                            fieldname: 'to',\n                            fieldtype: 'Datetime'\n                            \n                        }\n                    ],\n                    primary_action_label: __('Submit'),\n                    primary_action(values) {\n                        d.hide();\n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        actionData.meterAction = \"Profile\"\n                        actionData.meterSerial = frm.doc.serial\n                        \n                        if(values.source == \"Meter\")\n                            actionData.meterAction = \"queryProfileByDate\"\n                          \n                        actionData.fromDate = Date.parse(values.from)\n                        actionData.toDate = Date.parse(values.to)\n                        actionData.count = 100\n                        \n                        if(values.source == \"Meter\"){\n                            let diffDays = parseInt((actionData.toDate - actionData.fromDate) / (1000 * 60 * 60 * 24), 10);\n                            \n                            if(values.profile == \"Consumption\" && diffDays > 1)\n                                 failed(\"Maximum One Day!, \",frm.doc.name );\n                            \n                            let from = values.from.split(\" \")[0].split(\"-\")[2] +values.from.split(\" \")[0].split(\"-\")[1] +values.from.split(\" \")[0].split(\"-\")[0] + values.from.split(\" \")[1].replace(\":\",\"\").replace(\":\",\"\")\n                            let to = values.to.split(\" \")[0].split(\"-\")[2] +values.to.split(\" \")[0].split(\"-\")[1] +values.to.split(\" \")[0].split(\"-\")[0] + values.to.split(\" \")[1].replace(\":\",\"\").replace(\":\",\"\")\n                            console.log( from + \"/\" + to)\n                            if(values.profile == \"Consumption\" && actionData.metertype.includes(\"Electrometer\"))\n                                actionData.actionValue = \"1.0.99.1.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Billing\" && actionData.metertype.includes(\"Electrometer\"))\n                                actionData.actionValue = \"0.0.21.0.11.255:\" + from + \"/\" + to\n                            if(values.profile == \"Consumption\" && actionData.metertype.includes(\"Iskraemeco\"))\n                                actionData.actionValue = \"1.0.99.1.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Billing\" && actionData.metertype.includes(\"Iskraemeco\"))\n                                actionData.actionValue = \"0.0.98.1.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Consumption\" && actionData.metertype.includes(\"Quill\"))\n                                actionData.actionValue = \"1.0.99.1.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Billing\" && actionData.metertype.includes(\"Quill\"))\n                                actionData.actionValue = \"1.0.98.1.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Daily Billing\" && actionData.metertype.includes(\"Quill\"))\n                                actionData.actionValue = \"1.0.99.5.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Recharges\" && actionData.metertype.includes(\"Electrometer\"))\n                                actionData.actionValue = \"0.0.99.98.13.255:\" + from + \"/\" + to\n                            if(values.profile == \"Error\" && actionData.metertype.includes(\"Quill\"))\n                                actionData.actionValue = \"0.0.99.98.1.255:\" + from + \"/\" + to\n                            if(values.profile == \"Consumption\" && actionData.metertype.includes(\"WaterMeter-Electrometer\"))\n                                actionData.actionValue = \"8.0.99.1.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Billing\" && actionData.metertype.includes(\"WaterMeter-Electrometer\"))\n                                actionData.actionValue = \"0.0.98.1.0.255:\" + from + \"/\" + to\n                            if(values.profile == \"Consumption\" && actionData.metertype.includes(\"WaterMeter-Iskraemeco\"))\n                                actionData.actionValue = \"8.0.99.1.0.255:\" + from + \"/\" + to\n                                \n                            \n                        }\n                        \n                        if(values.profile == \"Consumption\" && actionData.metertype.includes(\"Electrometer\"))\n                            actionData.keys = \"1.0.99.1.0.255:0.0.1.0.0.255:2,1.0.99.1.0.255:0.0.19.0.0.255:5,1.0.99.1.0.255:0.0.19.0.0.255:6,1.0.99.1.0.255:0.0.96.10.7.255:2,1.0.99.1.0.255:1.0.1.29.0.255:2,1.0.99.1.0.255:1.0.1.8.0.255:2,1.0.99.1.0.255:1.0.13.7.0.0:2,1.0.99.1.0.255:1.0.14.7.0.255:2,1.0.99.1.0.255:1.0.15.8.0.255:2,1.0.99.1.0.255:1.0.2.29.0.255:2,1.0.99.1.0.255:1.0.2.8.0.255:2,1.0.99.1.0.255:1.0.31.4.0.255:2,1.0.99.1.0.255:1.0.32.4.0.255:2\"\n                        if(values.profile == \"Billing\" && actionData.metertype.includes(\"Electrometer\"))\n                            actionData.keys = \"0.0.21.0.11.255:0.0.1.0.0.255:2,0.0.21.0.11.255:0.0.19.0.0.255:5,0.0.21.0.11.255:0.0.94.20.46.255:2,0.0.21.0.11.255:1.0.1.16.10.255:2,0.0.21.0.11.255:1.0.1.8.0.255:2,0.0.21.0.11.255:1.0.15.8.0.255:2,0.0.21.0.11.255:1.0.2.8.0.255:2\"\n                        if(values.profile == \"Consumption\" && actionData.metertype.includes(\"Iskraemeco\"))\n                            actionData.keys = \"1.0.99.1.0.255:0.0.1.0.0.255:2,1.0.99.1.0.255:0.0.96.10.5.255:2,1.0.99.1.0.255:0.0.96.3.10.255:2,1.0.99.1.0.255:0.0.97.97.0.255:2,1.0.99.1.0.255:0.1.96.14.0.255:2,1.0.99.1.0.255:1.0.1.8.0.255:2,1.0.99.1.0.255:1.0.15.8.0.255:2,1.0.99.1.0.255:1.0.15.9.0.255:2,1.0.99.1.0.255:1.0.2.8.0.255:2,1.0.99.1.0.255:1.0.96.51.10.255:2,1.0.99.1.0.255:1.65.1.140.1.255:2\"\n                        if(values.profile == \"Billing\" && actionData.metertype.includes(\"Iskraemeco\"))\n                            actionData.keys = \"0.0.98.1.0.255:0.0.1.0.0.255:2,0.0.98.1.0.255:1.0.1.6.0.255:2,0.0.98.1.0.255:1.0.1.8.0.255:2,0.0.98.1.0.255:1.0.15.8.0.255:2,0.0.98.1.0.255:1.0.2.8.0.255:2,0.0.98.1.0.255:1.0.96.51.10.255:2,0.0.98.1.0.255:1.65.1.140.1.255:2\"\n                         \n                        if(values.source == \"System\" || ! values.source )    \n                            $.post( baseURL+\"/readTelemetry\" , actionData).done(function (response) {\n                                \n                                //showProfile(response)\n                                successTable(JSON.stringify(response),\n                                frm.doc.name,\"Value: \" + response,response,values.source);\n                            }).fail(function (jqXHR, textStatus, errorThrown) {\n                                failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                    frm.doc.name );\n                            });\n                        \n                        \n                        if(values.source == \"Meter\")\n                            $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                                console.log(response)\n                                //showProfile(response)\n                                successTable(JSON.stringify(response),\n                                frm.doc.name,\"Value: \" + response,response,values.source);\n                                \n                            })\n                            \n                        \n                        \n                    }\n                            \n                            \n                        });\n                        \n                        \n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction successTable (successData,reference,message,data,source){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: readProfileActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    if(source == \"Meter\")\n        showProfileMeter(data)\n    else\n        showProfile(data)\n    \n    \n}\n\nfunction failed (faileMessage,reference){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: readProfileActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n\nfunction showProfileMeter(data){\n    \n    let fields = []\n    let dataArray = []\n    \n    for (const key in data[\"0\"]){\n        \n        let lable = setLable(key)\n        \n        fields.push({\n\t\t\t\t\tfieldtype:'Data',\n\t\t\t\t\tin_list_view: 1,\n\t\t\t\t\tfieldname:key,\n\t\t\t\t\tlabel: __(setLable(key))\n\t\t\t\t})\n        \n    }\n    \n    console.log(fields)\n    \n    for (const [key, value] of Object.entries(data)) {\n        console.log(`${key}: ${value}`);\n         dataArray[key] = value\n    }\n\n    let dialog = new frappe.ui.Dialog({\n        title: 'Profile Data',\n        size: 'extra-large',\n        fields: [{\n                label: 'Profile Table',\n\t\t\t\tfieldname: \"profile\", \n\t\t\t\tfieldtype: \"Table\", \n\t\t\t\tcannot_add_rows: true,\n\t\t\t\tin_place_edit: false, \n\t\t\t\tdata: dataArray,\n                fields: fields\n            }]\n        \n    })\n    \n    dialog.show()\n    \n}\n\nfunction showProfile(data){\n    // console.log(data)\n    let fields = []\n    let dataArray = []\n    \n    for (const key in data) {\n        \n        let lable = setLable(key)\n        fields.push({\n\t\t\t\t\tfieldtype:'Data',\n\t\t\t\t\tin_list_view: 1,\n\t\t\t\t\tfieldname:key,\n\t\t\t\t\tlabel: __(setLable(key))\n\t\t\t\t})\n        \n\t\tdata[key].forEach((value,index)=>{\n\t\t    let rowObject = dataArray[index] ? dataArray[index] : {}\n\t\t    rowObject[key] = calculateValue(value.value,key)\n\t\t    dataArray[index] = rowObject\n\t\t    \n\t\t})\n\n    }\n    console.log(dataArray)\n    let dialog = new frappe.ui.Dialog({\n        title: 'Profile Data',\n        fields: [{\n                label: 'Profile Table',\n\t\t\t\tfieldname: \"profile\", \n\t\t\t\tfieldtype: \"Table\", \n\t\t\t\tsize: 'extra-large',\n\t\t\t\tcannot_add_rows: true,\n\t\t\t\tin_place_edit: false, \n\t\t\t\tdata: dataArray,\n                fields: fields\n            }]\n        \n    })\n    \n    dialog.show()\n    \n    \n    \n}\n\n\n\nfunction setLable(key){\n    //Electro Electrical\n    key = key.replace(\"1.0.99.1.0.255:0.0.1.0.0.255:2\",\"Date/Time\")\n    key = key.replace(\"1.0.99.1.0.255:0.0.19.0.0.255:5\",\"Avilable Credit [piaster]\")\n    key = key.replace(\"1.0.99.1.0.255:0.0.19.0.0.255:6\",\"Clear Credit [piaster]\")\n    key = key.replace(\"1.0.99.1.0.255:0.0.96.10.7.255:2\",\"Tamper\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.1.29.0.255:2\",\"1.0.99.1.0.255:1.0.1.29.0.255:2\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.1.8.0.255:2\",\"Total Import [Wh]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.13.7.0.0:2\",\"Power Factor\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.14.7.0.255:2\",\"Frequancy [mHz]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.15.8.0.255:2\",\"Total Consumption [Wh]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.2.29.0.255:2\",\"Import Interval\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.2.8.0.255:2\",\"Total Export [Wh]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.31.4.0.255:2\",\"Current [mA]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.32.4.0.255:2\",\"Voltage [mV]\")\n    \n    //Electro Billing\n    key = key.replace(\"0.0.21.0.11.255:0.0.1.0.0.255:2\",\"Date/Time\")\n    key = key.replace(\"0.0.21.0.11.255:0.0.19.0.0.255:5\",\"Avilable Credit [piaster]\")\n    key = key.replace(\"0.0.21.0.11.255:0.0.94.20.46.255:2\",\"Bill Amount [piaster]\")\n    key = key.replace(\"0.0.21.0.11.255:1.0.1.16.10.255:2\",\"Max Demand [Wh]\")\n    key = key.replace(\"0.0.21.0.11.255:1.0.1.8.0.255:2\",\"Total Import [Wh]\")\n    key = key.replace(\"0.0.21.0.11.255:1.0.15.8.0.255:2\",\"Total Consumption [Wh]\")\n    key = key.replace(\"0.0.21.0.11.255:1.0.2.8.0.255:2\",\"Total Export [Wh]\")\n    \n    //Iskra Electrical\n    key = key.replace(\"1.0.99.1.0.255:0.0.1.0.0.255:2\",\"Date/Time\")\n    key = key.replace(\"1.0.99.1.0.255:0.0.96.10.5.255:2\",\"Tamper\")\n    key = key.replace(\"1.0.99.1.0.255:0.0.96.3.10.255:2\",\"Relay Status\")\n    key = key.replace(\"1.0.99.1.0.255:0.0.97.97.0.255:2\",\"Error\")\n    key = key.replace(\"1.0.99.1.0.255:0.1.96.14.0.255:2\",\"Current Tarrif\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.1.8.0.255:2\",\"1.0.99.1.0.255:1.0.1.8.0.255:2\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.15.8.0.255:2\",\"Total Consumption [Wh]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.15.9.0.255:2\",\"Current Month Consumption [Wh]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.2.8.0.255:2\",\"Total Export [Wh]\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.96.51.10.255:2\",\"Bill Amount [piaster]\")\n    key = key.replace(\"1.0.99.1.0.255:1.65.1.140.1.255:2\",\"Avilable Credit [piaster]\")\n    \n    //Iskra Billing\n    key = key.replace(\"0.0.98.1.0.255:0.0.1.0.0.255:2\",\"Date/Time\")\n    key = key.replace(\"0.0.98.1.0.255:1.0.1.6.0.255:2\",\"Max Demand [Wh]\")\n    key = key.replace(\"0.0.98.1.0.255:1.0.1.8.0.255:2\",\"Total Import [Wh]\")\n    key = key.replace(\"0.0.98.1.0.255:1.0.15.8.0.255:2\",\"Total Consumption [Wh]\")\n    key = key.replace(\"0.0.98.1.0.255:1.0.2.8.0.255:2\",\"Total Export [Wh]\")\n    key = key.replace(\"0.0.98.1.0.255:1.0.96.51.10.255:2\",\"Bill Amount [piaster]\")\n    key = key.replace(\"0.0.98.1.0.255:1.65.1.140.1.255:2\",\"Avilable Credit [piaster]\")\n    \n    //Quill Electrical\n    key = key.replace(\"1.0.99.1.0.255:0.0.96.10.1.255:2\",\"Energy profile status\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.1.29.0.255:2\",\"Cum. active energy import (+A) Inc\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.3.29.0.255:2\",\"Cum. reactive energy import (+R) Inc\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.4.29.0.255:2\",\"Cum. reactive energy export (-R) Inc\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.3.8.0.255:2\",\"Reactive energy import (+R)\")\n    key = key.replace(\"1.0.99.1.0.255:1.0.1.27.0.255:2\",\"Active demand import (+P)\")\n    \n    //Quill Billing\n    key = key.replace(\"1.0.98.1.0.255:0.0.1.0.0.255:2\",\"Date/Time\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.1.8.0.255:2\",\"Active energy import (+A)\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.3.8.0.255:2\",\"Reactive energy import (+R)\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.1.29.0.255:2\",\"Cum. active energy import (+A) Inc\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.1.6.0.255:2\",\"Maximum demand active import (+P)\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.2.6.0.255:2\",\"Ch. 0 Sum Li Active power. (QII+QIII) Max. 1 Rate 0\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.1.8.1.255:2\",\"Active energy import (+A) rate 1\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.1.8.2.255:2\",\"Active energy import (+A) rate 2\")        \n    key = key.replace(\"1.0.98.1.0.255:1.0.3.8.1.255:2\",\"Reactive energy import (+R) rate 1\")        \n    key = key.replace(\"1.0.98.1.0.255:1.0.3.8.2.255:2\",\"Reactive energy import (+R) rate 2\")  \n    key = key.replace(\"1.0.98.1.0.255:1.0.140.129.0.255:2\",\"Avilable Credit [piaster]\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.0.255:2\",\"Bill Amount [piaster]\")\n    key = key.replace(\"1.0.98.1.0.255:0.0.96.10.3.255:2\",\"Error\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.3.29.0.255:2\",\"Cum. reactive energy import (+R) Inc\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.129.129.6.254:2\",\"Charge Amount Monthly\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.2.6.0.255:2\",\"Maximum demand ractive import (+P)\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.1.255:2\",\"Current Month used credit with T1\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.2.255:2\",\"Current Month used credit with T2\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.3.255:2\",\"Current Month used credit with T3\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.4.255:2\",\"Current Month used credit with T4\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.5.255:2\",\"Current Month used credit with T5\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.6.255:2\",\"Current Month used credit with T6\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.7.255:2\",\"Current Month used credit with T7\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.8.255:2\",\"Current Month used credit with T8\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.9.255:2\",\"Current Month used credit with T9\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.0.29.10.255:2\",\"Current Month used credit with T10\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.12.51.7.255:2\",\"Power down times\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.12.52.7.255:2\",\"Over load times\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.13.4.0.255:2\",\"Avarage power factor\")\n    key = key.replace(\"1.0.98.1.0.255:1.0.13.5.0.255:2\",\"Payment for power factor\")\n    \n    //Quill Billing Daily\n    key = key.replace(\"1.0.99.5.0.255:0.0.1.0.0.255:2\",\"Date/Time\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.1.8.0.255:2\",\"Active energy import (+A)\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.3.8.0.255:2\",\"Reactive energy import (+R)\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.1.29.0.255:2\",\"Cum. active energy import (+A) Inc\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.1.6.0.255:2\",\"Maximum demand active import (+P)\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.2.6.0.255:2\",\"Ch. 0 Sum Li Active power. (QII+QIII) Max. 1 Rate 0\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.1.8.1.255:2\",\"Active energy import (+A) rate 1\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.1.8.2.255:2\",\"Active energy import (+A) rate 2\")        \n    key = key.replace(\"1.0.99.5.0.255:1.0.3.8.1.255:2\",\"Reactive energy import (+R) rate 1\")        \n    key = key.replace(\"1.0.99.5.0.255:1.0.3.8.2.255:2\",\"Reactive energy import (+R) rate 2\")  \n    key = key.replace(\"1.0.99.5.0.255:1.0.140.129.0.255:2\",\"Avilable Credit [piaster]\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.0.255:2\",\"Bill Amount [piaster]\")\n    key = key.replace(\"1.0.99.5.0.255:0.0.96.10.3.255:2\",\"Error\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.3.29.0.255:2\",\"Cum. reactive energy import (+R) Inc\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.1.255:2\",\"Current Month used credit with T1\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.2.255:2\",\"Current Month used credit with T2\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.3.255:2\",\"Current Month used credit with T3\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.4.255:2\",\"Current Month used credit with T4\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.5.255:2\",\"Current Month used credit with T5\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.6.255:2\",\"Current Month used credit with T6\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.7.255:2\",\"Current Month used credit with T7\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.8.255:2\",\"Current Month used credit with T8\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.9.255:2\",\"Current Month used credit with T9\")\n    key = key.replace(\"1.0.99.5.0.255:1.0.0.29.10.255:2\",\"Current Month used credit with T10\")\n    \n    //Quill Error\n    key = key.replace(\"0.0.99.98.1.255:0.0.1.0.0.255:2\",\"Date/Time\")\n    key = key.replace(\"0.0.99.98.1.255:0.0.96.11.1.255:2\",\"Error Code\")\n\n    console.log(key)\n    \n    return key\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:59:08.155875",
  "module": "Madkour Meters APP",
  "name": "Set Relay Mode Script",
  "script": "let setRelayModeActionName = __(\"Set Relay Mode\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\t\t    \t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t        return\n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(setRelayModeActionName, function() {\n\t\t    \n\n\t\t    \n\t\t    \t\t    if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name, setRelayModeActionName)\n\t           return\n\t       }\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, setRelayModeActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, setRelayModeActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, setRelayModeActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: 'Enter details',\n                    fields: [\n                        {\n                            label: 'Select Required Action',\n                            fieldname: 'param',\n                            fieldtype: 'Select',\n                            options:[\"Mode 0\",\"Mode 5\"]\n                        }\n                    ],\n                    primary_action_label: 'Submit',\n                    primary_action(values) {\n                        d.hide();\n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        actionData.meterAction = \"SetRelayMode\"\n                        \n                        if(values.param == \"Mode 0\")\n                            actionData.actionValue = 0\n                        if(values.param == \"Mode 5\")\n                            actionData.actionValue = 5\n                            \n                        $.post( baseURL+\"/meterAction\" , actionData).done(function (response) {\n                            success(JSON.stringify(response),\n                            frm.doc.name,\"Value: \" + response[0], setRelayModeActionName);\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                frm.doc.name , setRelayModeActionName);\n                        });\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e,frm.doc.name, setRelayModeActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference,message, action = setRelayModeActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : setRelayModeActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n    \n    \n}\n\nfunction failed (faileMessage,reference, action = setRelayModeActionName){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : setRelayModeActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    \n    frappe.throw(__(\"Error while execution:\"+(faileMessage.toString().includes (\"TimeoutError\")? \"Meter Offline\" : faileMessage.toString())))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:58:38.881299",
  "module": "Madkour Meters APP",
  "name": "Common Meter Script",
  "script": "frappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\n\n\n\nfunction readMeterBalance(meterDoc,actionData,context){\n    \n    let action = __(\"Read Parameter\")\n    actionData.meterAction = \"Read\"\n    if(context == __(\"Meter Balance\") && actionData.metertype.includes(\"Electrometer\"))\n                            actionData.actionValue = \"0.0.19.0.0.255:5\"\n    if(context == __(\"Meter Balance\") && actionData.metertype.includes(\"Iskraemeco\"))\n                            actionData.actionValue = \"1.65.1.140.1.255:2\"\n    console.log(actionData)\n    console.log('got it!!')\n    $.post( baseURL+\"/meterAction\" , actionData).done(function (response) {\n                            console.log(response)\n                                commonSuccess(JSON.stringify(response),\n                                    meterDoc.name,\"Value [EGP]: \" + response[0]/1000 , action + \":\" + context);\n    }).fail(function (jqXHR, textStatus, errorThrown) {\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                meterDoc.name, action + \":\" + context );\n                        });\n    \n    \n}\n\n\nfunction commonSuccess(successData,reference,message,action){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(message)\n    }).then(doc => {\n        //console.log(doc);\n        //loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n    \n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:59:30.005580",
  "module": "Madkour Meters APP",
  "name": "hide password script",
  "script": "frappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t\t\t    if (frappe.user_roles.indexOf(\"System Manager\")==-1)\n\t\t                frm.set_df_property(\"password\", \"hidden\", frm.is_new() ? 0 : 1);\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:59:21.761738",
  "module": "Madkour Meters APP",
  "name": "Create Ticket",
  "script": "frappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.add_custom_button(\"Raise Support Ticket\", function() {\n\t\t    \n\t\t    frappe.new_doc(\"Meter Support Ticket\", {\"meter\": frm.doc.name, \"status\":\"Open\"}, doc => {\n\t\t        \n\t\t            console.log(\"Ticket!!\")\n                      \n                    });\n\t\t    \n\t\t})\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meter Payment Refrance",
  "enabled": 1,
  "modified": "2025-03-02 23:56:51.465274",
  "module": "Madkour Meters APP",
  "name": "Retry Charge",
  "script": "let chargeMeterActionName = __(\"Online Charge Retry\")\nlet actionData = {}\nlet baseURL = \"https://meter01.utilities-madkour.com\"\nlet loadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nlet doc = {}\n\nfrappe.ui.form.on('Meter Payment Refrance', {\n\trefresh(frm) {\n\t\t// Add Buton\n\t\tfrm.add_custom_button(chargeMeterActionName, function() {\n\n\t        \n\t       if (frappe.user_roles.indexOf(\"Meters Software Support\")==-1){\n\t           failed (__(\"You don't have permission for this action !\"),frm.doc.name, chargeMeterActionName)\n\t           return\n\t       }\n\t            \n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, chargeMeterActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, chargeMeterActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, chargeMeterActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if (frm.doc.status != \"Charge Failed\" || frm.doc.status != \"Charge Retry Failed\"){\n\t\t        failed (\"The charge need to be failed to perform this action!\",frm.doc.name, chargeMeterActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n\t\t        \n                \n                let d = new frappe.ui.Dialog({\n                    title: __('Enter details'),\n                    fields: [\n                        {\n                            label: 'Enter Charge Value [EGP]',\n                            fieldname: 'chargeAmount',\n                            fieldtype: 'Float',\n                            reqd: 1,\n                            //read_only: 1,\n                            default: frm.doc.charge_amount\n                        }\n                    ],\n                    primary_action_label: __('Submit'),\n                    primary_action(values) {\n                        d.hide();\n                        \n                        if(values.chargeAmount < 0){\n                            failed(\"Can't Charge Negative Values!, you can refund charges .... please contact the admin for further clarifications!\",frm.doc.name,chargeMeterActionName)\n                            return\n                        }\n                            \n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n\t\t                \n\t\t                frappe.db.get_doc('Meters', frm.doc.meter)\n                        .then(doc => {\n                            console.log(doc)\n                            \n                        this.doc = doc\n                            \n                        //fetch action data\n            \t\t    actionData.meterip = doc.ip\n            \t\t    actionData.meterPort = doc.port\n            \t\t    actionData.metertype = doc.type\n                        actionData.meterPassword = \"-a Low -P \"+doc.password\n                        actionData.meterId = doc.sync_meter_id\n                        actionData.meterSerial = doc.serial\n                        \n                         if(actionData.metertype.includes(\"Electrometer\"))\n                            actionData.meterBalance = \"0.0.19.0.0.255:5\"\n                        if(actionData.metertype.includes(\"Iskraemeco\"))\n                            actionData.meterBalance = \"1.65.1.140.1.255:2\"\n                        if(actionData.metertype.includes(\"Quill\"))\n                            actionData.meterBalance = \"1.0.140.129.0.255:2\"\n                        \n                        \n                        actionData.meterAction = \"AddCredit\"\n                        actionData.actionValue = values.chargeAmount * 1000\n                        if(actionData.metertype.includes(\"Quill\"))\n                            actionData.actionValue = values.chargeAmount\n                            \n                        $.post( baseURL+\"/chargeMeterV2\" , actionData,function (response){\n                            \n                            if(response.chargeFailed){\n                                failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                doc.name,chargeMeterActionName );\n                            }\n                            //TODO update Payment Refrance\n                            frm.set_value('status', 'Success Retry')\n                            frm.save();\n                            let messageString = __(`Previouse Balance: ${response.currentBalance/1000} EGP <br>\n                                    Charge Amount: ${response.chargeAmount/1000} EGP <br>\n                                    New Balance: ${response.newBalance/1000} EGP <br>`)\n                                    \n                            if(actionData.metertype.includes(\"Quill\"))\n                                        messageString = __(`Previouse Balance: ${response.currentBalance/100} EGP <br>\n                                    Charge Amount: ${response.chargeAmount} EGP <br>\n                                    New Balance: ${response.newBalance/100} EGP <br>`)\n                                    \n                             success(JSON.stringify(response),\n                            doc.name,messageString,chargeMeterActionName);\n                        }).done(function (response) {\n                            //TODO update Payment Refrance\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            //TODO update Payment Refrance\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                doc.name,chargeMeterActionName );\n                        });\n                        })\n                        \n\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e, doc.name,chargeMeterActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference,message,action = chargeMeterActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : chargeMeterActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n    \n    \n    \n}\n\nfunction failed (faileMessage,reference,action = chargeMeterActionName){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : chargeMeterActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.throw(__(\"Error while execution:\"+(faileMessage.toString().includes (\"TimeoutError\")? \"Meter Offline\" : faileMessage.toString())))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:58:03.228619",
  "module": "Madkour Meters APP",
  "name": "Write Param",
  "script": "let writeParamActionName = __(\"Write Param\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(writeParamActionName, function() {\n\t\t    \n\t\t     if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name, setRelayModeActionName)\n\t           return\n\t       }\n\t\t    \n\t\t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t            return\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,writeParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,writeParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,writeParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: __('Enter details'),\n                    fields: [\n                        {\n                            label: 'Select Required Param Type',\n                            fieldname: 'paramType',\n                            fieldtype: 'Select',\n                            options:[\"WriteRegINT32\",\"WriteString\", \"WriteRegUINT8\"]\n                            \n                        },\n                        {\n                            label: 'Param OBIS',\n                            fieldname: 'obis',\n                            fieldtype: 'Data'\n                            \n                        },\n                        {\n                            label: 'Param Value',\n                            fieldname: 'value',\n                            fieldtype: 'Long Text'\n                            \n                        }\n                    ],\n                    primary_action_label: __('Submit'),\n                    primary_action(values) {\n                        d.hide();\n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        actionData.meterAction = values.paramType\n                        actionData.actionValue = values.obis+':'+values.value\n                        \n                        $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                            \n                            //showProfile(response)\n                            success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + response, writeParamActionName + \":\" + values.paramType+ \":\" + values.obis+':'+values.value);\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                frm.doc.name,writeParamActionName );\n                        });\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e,frm.doc.name,writeParamActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n\t\n\t\n})\n\n\nfunction success (successData,reference,message,action = readParamActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action? action : readParamActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n\n    \n    \n    \n}\n\n\nfunction failed (faileMessage,reference,meterAction){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: meterAction,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:58:46.252045",
  "module": "Madkour Meters APP",
  "name": "Get Meter Status",
  "script": "frappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t\t// your code here\n    \t\tfrappe.db.get_list('Meter Status',{\n                fields: ['network_status', 'avilable_credit', 'modified','creation', 'last_update','total_consumption'],\n                filters: {\n                    meter: frm.doc.name\n                }\n            })\n            .then(docs => {\n                \n                let doc = docs[0]\n\n                if (doc){\n                    setMeterStatus(frm,doc.network_status)\n                    frm.doc.meter_last_update = doc.last_update\n                    frm.doc.avilable_credit = frm.doc.type.includes(\"Quill\")? doc.avilable_credit / 100 : doc.avilable_credit / 1000\n                    frm.doc.total_consumption = doc.total_consumption  / 1000\n                    \n                    frm.refresh_field('meter_last_update');\n                    frm.refresh_field('avilable_credit') ;\n                    frm.refresh_field('total_consumption');\n                }\n    \n            })\n\n\t}\n})\n\n\nfunction setMeterStatus(frm, meterStatus){\n                frm.doc.meter_network_status = meterStatus\n                frm.refresh_field('meter_network_status');\n                \n                let meterStatusElement = $('div[data-fieldname=\"meter_network_status\"]').children('div').children('div').children('div')\n                \n                meterStatusElement.css(\"color\",(meterStatus === \"Online\"? \"green\":\"red\"))\n                meterStatusElement.css(\"background-color\",(meterStatus === \"Online\"? \"#c1d3c087\":\"#eb828287\"))\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:58.193468",
  "module": "Madkour Meters APP",
  "name": "Read Param Obis",
  "script": "let readObisParamActionName = __(\"Read Obis Param\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(readObisParamActionName, function() {\n\t\t    \n\t\t     if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name, setRelayModeActionName)\n\t           return\n\t       }\n\t\t    \n\t\t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t            return\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,readObisParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,readObisParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,readObisParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: __('Enter details'),\n                    fields: [\n                        {\n                            label: 'Param OBIS',\n                            fieldname: 'obis',\n                            fieldtype: 'Data'\n                            \n                        }\n                    ],\n                    primary_action_label: __('Submit'),\n                    primary_action(values) {\n                        d.hide();\n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        actionData.meterAction = \"Read\"\n                        actionData.actionValue = values.obis\n                        \n                        $.post( baseURL+\"/meterAction\" , actionData).done(function (response) {\n                            \n                            //showProfile(response)\n                            success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + response, readObisParamActionName + \":\" + values.paramType+ \":\" + values.obis+':'+values.value);\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                frm.doc.name,readObisParamActionName );\n                        });\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e,frm.doc.name,readObisParamActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n\t\n\t\n})\n\n\nfunction success (successData,reference,message,action = readParamActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action? action : readParamActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n\n    \n    \n    \n}\n\n\nfunction failed (faileMessage,reference,meterAction){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: meterAction,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:58:59.764254",
  "module": "Madkour Meters APP",
  "name": "Meters Bulk Actions",
  "script": "\nfrappe.listview_settings[\"Meters\"] = frappe.listview_settings[\"Meters\"] || {}\n\n\nfrappe.listview_settings[\"Meters\"].formatters= {\n        customer(value){\n            return value ? \"Yes\" : \"No\"\n        }\n    \n}\n\nfrappe.listview_settings[\"Meters\"].button= {\n        show(doc) {\n            return doc.reference_name;\n        }\n}\n\nconsole.log(frappe.listview_settings)",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:58:54.562533",
  "module": "Madkour Meters APP",
  "name": "Set Meter Payment Mode",
  "script": "let setMeterPaymentModeActionName = __(\"Set Meter Payment Mode\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\t\t    \t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t        return\n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(setMeterPaymentModeActionName, function() {\n\t\t    \n\n\t\t    \n\t\t    \t\t    if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name, setMeterPaymentModeActionName)\n\t           return\n\t       }\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, setMeterPaymentModeActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, setMeterPaymentModeActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, setMeterPaymentModeActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: 'Enter details',\n                    fields: [\n                        {\n                            label: 'Select Required Mode',\n                            fieldname: 'param',\n                            fieldtype: 'Select',\n                            options:[\"Pre-Payment Mode\",\"Post-Payment Mode\"]\n                        }\n                    ],\n                    primary_action_label: 'Submit',\n                    primary_action(values) {\n                        d.hide();\n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        \n                        \n                        actionData.meterAction = \"SetRelayMode\"\n                        \n                        if(values.param == \"Pre-Payment Mode\")\n                            actionData.actionValue = 0\n                        if(values.param == \"Post-Payment Mode\")\n                            actionData.actionValue = 5\n                        \n                        if(frm.doc.type.includes(\"Electro\"))\n                            actionData.meterAction = \"SetIntStruct\"\n                        \n                        if(values.param == \"Pre-Payment Mode\" && frm.doc.type.includes(\"Electro\"))\n                            actionData.actionValue = \"0.0.19.0.0.255:2,2\"\n                        if(values.param == \"Post-Payment Mode\" && frm.doc.type.includes(\"Electro\"))\n                            actionData.actionValue = \"0.0.19.0.0.255:1,2\"\n                        \n                        $.post( baseURL+\"/meterAction\" , actionData).done(function (response) {\n                            success(JSON.stringify(response),\n                            frm.doc.name,\"Value: \" + response[0], setMeterPaymentModeActionName);\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                frm.doc.name , setMeterPaymentModeActionName);\n                        });\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e,frm.doc.name, setMeterPaymentModeActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference,message, action = setMeterPaymentModeActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : setMeterPaymentModeActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n    \n    \n}\n\nfunction failed (faileMessage,reference, action = setMeterPaymentModeActionName){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : setMeterPaymentModeActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    \n    frappe.throw(__(\"Error while execution:\"+(faileMessage.toString().includes (\"TimeoutError\")? \"Meter Offline\" : faileMessage.toString())))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:56:20.292265",
  "module": "Madkour Meters APP",
  "name": "Read Param",
  "script": "let readParamActionName = __(\"Read Parameter\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\t\t    \t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t        return\n\n\t\t// Add Buton\n\t\tfrm.add_custom_button(readParamActionName, function() {\n\t\t    \n\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, readParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, readParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, readParamActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: __('Enter details'),\n                    fields: [\n                        {\n                            label: __('Select Required Parameter'),\n                            fieldname: 'param',\n                            fieldtype: 'Select',\n                            options:[\n                                __(\"Date/Time\"),\n                                __(\"Error Status\"),\n                                __(\"Meter Balance\"),\n                                __(\"Meter Serial\"),\n                                __(\"Read Backup Tariff\"),\n                                __(\"Read Active Tariff\"),\n                                __(\"Relay Status\"),\n                                __(\"Relay Mode\"),\n                                __(\"Meter Payment Mode\"),\n                                __(\"Weekends\")\n                                ]\n                        }\n                    ],\n                    primary_action_label: __('Submit'),\n                    primary_action(values) {\n                        d.hide();\n                        \n                       \n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        actionData.meterSerial = frm.doc.serial\n                        actionData.meterAction = \"Read\"\n                        \n                        if((\n//                            (values.param == __(\"Error Status\")) \n//                         (values.param == __(\"Meter Balance\")) \n                         (values.param == __(\"Read Backup Tariff\")) \n                        || (values.param == __(\"Read Active Tariff\"))\n                        //|| (values.param == __(\"Relay Status\")) \n                        || (values.param == __(\"Relay Mode\")) \n                        || (values.param == __(\"Meter Payment Mode\")) \n                        || (values.param == __(\"Weekends\")) \n\n                        ) && actionData.metertype.includes(\"WaterMeter-Iskraemeco\")){\n                            failed (\"Iskraemeco Meter Does not suppor this DLMS feature!\",frm.doc.name, readParamActionName)\n\t\t                    return\n                        }\n                        \n                         //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        if(values.param == __(\"Error Status\"))\n                            actionData.actionValue = \"0.0.97.97.0.255:2\"\n                        if(values.param == __(\"Error Status\") && actionData.metertype.includes(\"Quill\"))\n                            actionData.actionValue = \"0.0.96.10.3.255:2\"\n                        if(values.param == __(\"Error Status\") && actionData.metertype.includes(\"WaterMeter-Iskraemeco\"))\n                            actionData.actionValue = \"8.0.97.97.2.255:2\"\n                            \n//                            actionData.actionValue = \"1.0.130.130.0.255:2\"\n                        if(values.param == __(\"Date/Time\"))\n                            actionData.actionValue = \"0.0.1.0.0.255:2\"\n                        if(values.param == __(\"Meter Serial\"))\n                            actionData.actionValue = \"0.0.96.1.0.255:2\"\n                            \n                        if(values.param == __(\"Meter Balance\") && actionData.metertype.includes(\"Electrometer\"))\n                            actionData.actionValue = \"0.0.19.0.0.255:5\"\n                        if(values.param == __(\"Meter Balance\") && actionData.metertype.includes(\"Iskraemeco\"))\n                            actionData.actionValue = \"1.65.1.140.1.255:2\"\n                        if(values.param == __(\"Meter Balance\") && actionData.metertype.includes(\"WaterMeter-Iskraemeco\"))\n                            actionData.actionValue = \"0.0.19.10.0.255:2\"\n                            \n                        if(values.param == __(\"Meter Balance\") && actionData.metertype.includes(\"Quill\"))\n                            actionData.actionValue = \"1.0.140.129.0.255:2\"\n                        if(values.param == __(\"Relay Status\"))\n                            actionData.actionValue = \"0.0.96.3.10.255:3\"\n                        if(values.param == __(\"Relay Mode\") || values.param == __(\"Meter Payment Mode\"))\n                            actionData.actionValue = \"0.0.96.3.10.255:4\"\n                        \n                        if(values.param == __(\"Meter Payment Mode\") && actionData.metertype.includes(\"Electrometer\"))\n                            actionData.actionValue = \"0.0.19.0.0.255:2\"\n                        \n                        if(values.param == __(\"Weekends\"))\n                            actionData.actionValue = \"1.0.135.129.2.255:2\"    \n                        \n                        \n                        if(values.param == __(\"Read Backup Tariff\") && actionData.metertype.includes(\"Iskraemeco\"))\n                            actionData.actionValue = \"1.65.0.101.1.255:2;1.65.0.111.1.255:2;1.65.1.152.21.255:2;1.65.0.101.2.255:2;1.65.0.111.2.255:2;1.65.1.152.22.255:2;1.65.0.101.3.255:2;1.65.0.111.3.255:2;1.65.1.152.23.255:2;1.65.0.101.4.255:2;1.65.0.111.4.255:2;1.65.1.152.24.255:2;1.65.0.101.5.255:2;1.65.0.111.5.255:2;1.65.1.152.25.255:2;1.65.0.101.6.255:2;1.65.0.111.6.255:2;1.65.1.152.26.255:2;1.65.0.101.7.255:2;1.65.0.111.7.255:2;1.65.1.152.27.255:2;1.65.0.101.8.255:2;1.65.0.111.8.255:2;1.65.1.152.28.255:2;1.65.0.101.9.255:2;1.65.0.111.9.255:2;1.65.1.152.29.255:2;1.65.0.101.10.255:2;1.65.1.152.30.255:2;0.128.96.2.8.255:2;1.65.1.152.11.255:2;0.128.96.2.10.255:2\"\n                        if(values.param == __(\"Read Backup Tariff\") && actionData.metertype.includes(\"Quill\"))\n                            actionData.actionValue = \"1.0.130.135.1.255:2;1.0.130.135.4.255:2;1.0.135.129.5.255:10\"\n                        if(values.param == __(\"Read Active Tariff\") && actionData.metertype.includes(\"Iskraemeco\"))\n                            actionData.actionValue = \"1.65.0.103.1.255:2;1.65.0.113.1.255:2;1.65.0.103.2.255:2;1.65.0.113.2.255:2;1.65.0.103.3.255:2;1.65.0.113.3.255:2;1.65.0.103.4.255:2;1.65.0.113.4.255:2;1.65.0.103.5.255:2;1.65.0.113.5.255:2;1.65.0.103.6.255:2;1.65.0.113.6.255:2;1.65.0.103.7.255:2;1.65.0.113.7.255:2;1.65.0.103.8.255:2;1.65.0.113.8.255:2;1.65.0.103.9.255:2;1.65.0.113.9.255:2;1.65.0.103.10.255:2\"\n                        if(values.param == __(\"Read Active Tariff\") && actionData.metertype.includes(\"Quill\"))\n                            actionData.actionValue = \"1.0.130.135.1.255:2;1.0.130.135.5.255:2\"\n                          \n                        $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                            if(values.param == __(\"Meter Balance\") && (!actionData.metertype.includes(\"Quill\")) )\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value [EGP]: \" + response[0]/1000 , readParamActionName + \":\" + values.param);\n                            else if(values.param == __(\"Meter Balance\") && (actionData.metertype.includes(\"Quill\")) )\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value [EGP]: \" + response[0]/100 , readParamActionName + \":\" + values.param);\n                            else if(values.param == __(\"Meter Balance\"))\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value [EGP]: \" + response[0]/1000 , readParamActionName + \":\" + values.param);\n                            else if (values.param == __(\"Meter Serial\"))\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + hex_to_ascii(response[0].replaceAll(\" \",\"\")) + \"<br>\" + response[0] , readParamActionName + \":\" + values.param);\n                            else if (values.param == __(\"Read Backup Tariff\") || values.param == __(\"Read Active Tariff\"))\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + response, readParamActionName + \":\" + values.param);\n                            else if (values.param == __(\"Meter Payment Mode\") && actionData.metertype.includes(\"Electrometer\"))\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + (response[0].split(\",\")[0] == \"2\") ? \"Prepayment Mode\" : \"Postpayment Mode\" , readParamActionName + \":\" + values.param);\n                            else if(values.param == __(\"Weekends\"))\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + response[0].replace(\"01\",\"Monday\").replace(\"02\",\"Tuesday\").replace(\"03\",\"Wednesday\").replace(\"04\",\"Thursday\").replace(\"05\",\"Friday\").replace(\"06\",\"Saturday\").replace(\"07\",\"Sunday\")\n                                    , readParamActionName + \":\" + values.param);\n                            else\n                                success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + response[0] , readParamActionName + \":\" + values.param);\n                            \n                            setMeterStatus(frm,\"Online\")\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            \n                             setMeterStatus(frm,\"Offline\")\n                                \n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                frm.doc.name, readParamActionName + \":\" + values.param );\n                            \n                        });\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e,frm.doc.name, readParamActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n\nfunction success (successData,reference,message,action = readParamActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action? action : readParamActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n\n    \n}\n\nfunction failed (faileMessage,reference,action = readParamActionName){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action? action : readParamActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    \n    frappe.throw(__(\"Error while execution:\"+(faileMessage.toString().includes(\"Timeout\")? \"Meter Offline\" : faileMessage.toString())))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n\nfunction hex_to_ascii(str1)\n {\n\tvar hex  = str1.toString();\n\tvar str = '';\n\tfor (var n = 0; n < hex.length; n += 2) {\n\t\tstr += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n\t}\n\treturn str;\n }\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:42.959133",
  "module": "Madkour Meters APP",
  "name": "Meter Installments",
  "script": "let meterInstallmentActionName = __(\"Installments Details\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t    \n\n\t   \t\t    \n\t\t  if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t        return     \n\t\t// Add Buton\n\t\tvar filters = {\n                'meter': frm.doc.name,\n                'payment_status': 'Unpaid'\n                // Add more fields as needed\n            };\n\n            frappe.call({\n                method: 'get_deductions',\n                args: filters,\n                freeze: true,\n                callback: function (r) {\n                    console.log('ssssssssssssssssssssssssssssssssssss')\n                    console.log(r)\n                    if(r.message !== 0){\n                        frm.add_custom_button('Deduction Details', function () {\n    try {\n        frappe.call({\n            method: 'get_deductions',\n            args: {\n                meter: frm.doc.name\n            },\n            freeze: true,\n            callback: function (response) {\n                const deductionAmount = response.message;\n                const hasDeduction = deductionAmount > 0;\n\n                const d = new frappe.ui.Dialog({\n                    title: __('Deduction Details'),\n                    fields: [\n                        {\n                            label: 'Deduction Amount',\n                            fieldname: 'deduction_amount',\n                            fieldtype: 'Currency',\n                            read_only: 1,\n                            default: deductionAmount\n                        },\n                    ],\n                    size: 'extra-large',\n                    primary_action_label: __('Pay Deduction'),\n                    primary_action: function (values) {\n                        if (hasDeduction) {\n                            frappe.confirm(\n                                __(\"Do you want to pay the Deduction?\"),\n                                function () {\n                                    frappe.msgprint(\"Payment has been processed.\");\n                                    d.hide();\n\n                                    const payment_entry = {\n                                        doctype: 'Payment Entry',\n                                        payment_type: 'Receive',\n                                        party_type: 'Customer',\n                                        party: frm.doc.customer,\n                                        paid_to: '1110 - Cash - MU',\n                                        mode_of_payment: 'Cash',\n                                        reference_no: `Deduction | ${new Date()} | ${frm.doc.serial}`,\n                                        received_amount: values.deduction_amount,\n                                        paid_amount: values.deduction_amount\n                                    };\n\n                                    frappe.call({\n                                        method: 'create_d_pe',\n                                        args: {\n                                            doc: frm.doc,\n                                            meter: frm.doc.name,\n                                            deduction_amount: values.deduction_amount,\n                                            payment_entry: payment_entry\n                                        },\n                                        freeze: true,\n                                        callback: function (peResponse) {\n                                            d.set_value('deduction_amount', peResponse.message);\n                                            d.fields_dict['deduction_amount'].refresh();\n\n                                            frm.doc.deduction_amount = 0.0;\n                                            frm.doc.__unsaved = 0;\n                                            frm.refresh();\n                                        },\n                                        error: function (errorResponse) {\n                                            console.log(errorResponse);\n                                        }\n                                    });\n                                },\n                                function () {\n                                    frappe.msgprint(\"Payment has been canceled.\");\n                                }\n                            );\n                        } else {\n                            frappe.msgprint('There is no deduction to pay');\n                        }\n                    }\n                });\n\n                d.show();\n            },\n            error: function (errorResponse) {\n                console.log(errorResponse);\n            }\n        });\n    } catch (e) {\n        failed(e, frm.doc.name, 's');\n    }\n});\n\n                    }\n                }\n            });\n        \n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Installments Meters\",\n                    filters: { name: frm.doc.name }, // Replace \"Name\" with the actual name you want to check\n                    fieldname: \"name\" // Replace with the field you want to retrieve\n                },\n                callback: function(response) {\n                    if (response.message && response.message.name) {\n                        // The document exists, so you can proceed with your code\n                        frm.add_custom_button(meterInstallmentActionName, function() {\n\t\t    \n                \t\t    try{\n                                \n                                let d = new frappe.ui.Dialog({\n                                title: __('Installments Details'),\n                                fields: [\n                                    {\n                                        label: 'Total Installments Value [EGP]',\n                                        fieldname: 'chargeAmount',\n                                        fieldtype: 'Float',\n                                        read_only: 1\n                                    },\n                                    {\n                                        fieldname: 'installments_table', // Unique fieldname for the child table\n                                        fieldtype: 'Table',\n                                        label: 'Installments Table',\n                                        read_only: 1,\n                                        fields: [\n                                            {\n                                                fieldname: 'date',\n                                                label: 'Date',\n                                                fieldtype: 'Date',\n                                                read_only: 1,\n                                                in_list_view: 1,\n                                                disabled: true,\n                                                width: '50px'\n                                            },\n                                            \n                                            {\n                                                fieldname: 'value_to_pay',\n                                                label: 'Value to pay [EGP]',\n                                                fieldtype: 'Currency',\n                                                read_only: 1,\n                                                in_list_view: 1,\n                                                disabled: true,\n                                                width: '50px'\n                                            },\n                                            {\n                                                fieldname: 'status',\n                                                label: 'Status',\n                                                fieldtype: 'Data',\n                                                read_only: 1,\n                                                in_list_view: 1,\n                                                disabled: true,\n                                                width: '50px'\n                                            },\n                                            \n                                            // Add more columns as needed\n                                        ],\n                                        click: function () {\n                                        // Optional: Show a message indicating that row removal is not allowed\n                                        frappe.msgprint(__('Row removal is not allowed.'));\n                                    },\n                                    },\n                                    {\n                                        label: '',\n                                        fieldname: '',\n                                        fieldtype: 'Section Break'\n                                    },\n                                ],\n                                size: 'extra-large',\n                                primary_action_label: __('Pay Installment'),\n                                primary_action(values) {\n                                    console.log('sssssssss')\n                                                    console.log(values)\n                                    \n                                   var flag = 0;\n                                if (values.chargeAmount) {\n                                    const doctype = 'Installment Table'; // Replace with your actual doctype\n                                \n                                    // Fetch records that match the specified filters\n                                    frappe.call({\n                                        method: \"frappe.client.get\",\n                                        args: {\n                                            doctype: \"Installments Meters\",\n                                            name: frm.doc.name,\n                                            update_modified: false \n                                        },\n                                        callback(r) {\n                                            if (r.exc) {\n                                                // Handle the error gracefully\n                                                frappe.msgprint(\"Error: \" + r.exc);\n                                                return;\n                                            }\n                                            frappe.confirm(\n                                                __(\"Do you want to pay the installments?\"),\n                                                function () {\n                                                    // User clicked \"Yes\"\n                                                    frappe.msgprint(\"Payment has been processed.\");\n                                                    d.hide();\n                                                    var doc1 = r.message;\n                                            console.log(doc1);\n                                            let docc ;\n                                            if (doc1.__islocal) {\n                                                // The document is a local copy and has not been saved yet\n                                                frappe.msgprint(\"This document has not been saved. Save it before processing payments.\");\n                                                return;\n                                            }\n                                \n                                            for (let i = 0; i < doc1.table.length; i++) {\n                                                if (doc1.table[i].date <= frappe.datetime.nowdate() && doc1.table[i].status === 'Unpaid') {\n                                                    console.log(\"SSS\")\n                                                    \n                                                    var payment_entry = {\n                                                        doctype: 'Payment Entry',\n                                                        payment_type: 'Receive',\n                                                        party_type: 'Customer',\n                                                        party: frm.doc.customer,\n                                                        paid_to: '1110 - Cash - MU',\n                                                        mode_of_payment: 'Cash',\n                                                        reference_no: `Installment | ${doc1.table[i].date} | ${doc1.serial}`,\n                                                        received_amount: doc1.table[i].value_to_pay,\n                                                        paid_amount: doc1.table[i].value_to_pay\n                                                    };\n                                                    \n                                                    frappe.call({\n                                                        method: 'frappe.client.insert',\n                                                        args: {\n                                                            doc: payment_entry\n                                                        },\n                                                        callback: function(response) {\n                                                            if (response.message) {\n                                                                \n                                                                frappe.call({\n                                                                    method: 'server',\n                                                                    args: {\n                                                                        'name': doc1.table[i].name,\n                                                                        'pename': response.message.name\n                                                                    },\n                                                                    // Use the serialized JSON here\n                                                                    callback: function(response) {\n                                                                        if (!response.exc) {\n                                                                            \n                                                                        } else {\n                                                                            // Handle the error, e.g., show an error message\n                                                                            frappe.msgprint('Error updating description: ' + response.exc);\n                                                                        }\n                                                                    }\n                                                                });\n                                                            } else {\n                                                                console.error('Error inserting Payment Entry document:', response);\n                                                            }\n                                                        },\n                                                        error: function(error) {\n                                                            console.error('Error inserting Payment Entry document:', error);\n                                                        }\n                                                    });\n                                                    \n                                                                        \n                                                }\n                                                \n                                                \n                                            }\n                                            \n                                            \n                                            //Start - Update Table\n                                            \n                                        //   window.location.reload();\n                                            \n                                            //End - Updating Table\n                                                },\n                                                function () {\n                                                    // User clicked \"No\"\n                                                    frappe.msgprint(\"Payment has been canceled.\");\n                                                    \n                                                }\n                                            );\n                                            \n                                        }\n                                    });\n                                \n                                } else {\n                                    console.log(\"Nothing to pay\");\n                                    frappe.msgprint(\"Nothing to pay\");\n                                }\n                                \n                                                                \n                                                                },\n                                \n                            });\n                            \n                            const today = frappe.datetime.nowdate();\n                            \n                             // Get today's date\n                            \n                            const filters = {\n                                // date: ['<=', today], // Date filter: fieldname <= today\n                                'parent': frm.doc.name // Additional filter: fieldname = your_filter_value\n                            }\n                        \n                            // Specify the DocType you want to fetch data from\n                            const doctype = 'Installment Table'; // Replace with the actual DocType name\n                            \n                            let doc_manual = frappe.get_doc('Meters Installments', frm.doc.name);\n                            frappe.call({\n                                method: \"frappe.client.get\",\n                                args: {\n                                    doctype: \"Installments Meters\",\n                                    name: frm.doc.name,\n                                },\n                                callback(r) {\n                                    if(r.message) {\n                                        var doc = r.message;\n                                        \n                                        d.fields_dict['installments_table'].grid.remove_all();\n                                        var count = 0\n                                        \n                                        var paymenttotal = 0\n                                        console.log(doc.table.length);\n                                        for (let i = 0; i< doc.table.length; i++){\n                                            \n                                            if (doc.table[i].date <= today && doc.table[i].status === 'Unpaid'){\n                                                console.log(doc.table[i].date + ' ' + today)\n                                                let newRow1 = d.get_field('installments_table').grid.add_new_row()\n                                                let nn = d.get_field('installments_table').grid.df.data;\n                                                nn[count].status = doc.table[i].status\n                                                nn[count].date = doc.table[i].date\n                                                nn[count].value_to_pay = doc.table[i].value_to_pay\n                                                paymenttotal += doc.table[i].value_to_pay;\n                                                count++;\n                                            }\n                                        }\n                                        d.fields_dict['installments_table'].refresh();\n                                        d.set_value('chargeAmount', paymenttotal);\n                                    }\n                                }\n                            });\n                             \n                            \n                            frappe.call({\n                            method: 'get_deductions',\n                            args: {\n                                meter: frm.doc.name\n                            },\n                            freeze: true,\n                            callback: function(response) {\n                                console.log(response)\n                                console.log('response.message')\n                                \n                                d.set_value('deduction_amount', response.message); // replace 'your_target_field' with the target field in your form\n                                d.fields_dict['deduction_amount'].refresh();\n                                \n                                //frm.refresh_field('installments');\n                                frm.doc.__unsaved = 0\n                                frm.refresh()\n                                \n                            },\n                            error: function(r) {\n                                console.log(r)\n                                \n                            }\n                \t\t}) \n                            \n                        //     frappe.call({\n                        //     method: \"frappe.client.get\",\n                        //     args: {\n                        //         doctype: \"Deduction\",\n                        //         filters: { meter: frm.doc.name}\n                        //     },\n                        //     callback(r) {\n                        //         if (r.message) {\n                        //             var doc = r.message;\n                        //             console.log('Received Deduction:', r);\n                        //             var count = 0;\n                        //             // ... (rest of your logic)\n                        //             d.set_value('deduction_amount', doc.deduction_amount); // replace 'your_target_field' with the target field in your form\n                        //             d.fields_dict['deduction_amount'].refresh();\n                        //         }\n                        //     }\n                        // });\n\n                            d.show();\n                          console.log('ssss')\n                        //   d.show();\n                            // frappe.get_doc('Task', 'TASK00002')\n                                    \n                        }catch(e){\n                            failed (e, frm.doc.name,'s')\n                        }\n                        \n                        \n                            \n        });\n                    } \n                }\n            });\n\t}\n})\n\nfunction success (successData,reference,message,action = meterInstallmentActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : meterInstallmentActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n    \n    \n    \n}\n\nfunction failed (faileMessage,reference,action = meterInstallmentActionName){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action ? action : meterInstallmentActionName,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.throw(__(\"Error while execution:\"+(faileMessage.toString().includes (\"TimeoutError\")? \"Meter Offline\" : faileMessage.toString())))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:48.140847",
  "module": "Madkour Meters APP",
  "name": "View Meter Installments",
  "script": "frappe.ui.form.on('Meters', {\r\n    onload(frm) {\r\n        frappe.db.get_value('Installments Meters', frm.doc.name, \"name\")\r\n            .then(req => {\r\n                if (req.message.name) {\r\n                    frappe.call({\r\n                        method: \"frappe.client.get\",\r\n                        args: {\r\n                            doctype: \"Installments Meters\",\r\n                            name: frm.doc.name,\r\n                        },\r\n                        freeze: true,\r\n                        callback: function(response) {\r\n                            const installmentsTable = response.message.table;\r\n\r\n                            frm.doc.installments = []; // Clear existing child table entries\r\n\r\n                            installmentsTable.forEach(element => {\r\n                                frm.add_child('installments', {\r\n                                    date: element.date,\r\n                                    value_to_pay: element.value_to_pay,\r\n                                    status: element.status,\r\n                                    reference_name: element.reference_name\r\n                                });\r\n                            });\r\n\r\n                            frm.refresh_field('installments');\r\n                            frm.doc.__unsaved = 0;\r\n                            frm.refresh();\r\n                        },\r\n                        error: function(r) {\r\n                            console.log(r);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:56:14.106789",
  "module": "Madkour Meters APP",
  "name": "Meter Init",
  "script": "let initMeterActionName = __(\"Init Meter\")\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t// Add Buton\n\t\tfrm.add_custom_button(initMeterActionName, function() {\n\t\t    //Show Loading \n\t\t    \n\t\t     if((frm.doc.initial_charge_amount < 1) && (frm.doc.contract_type != 'Postpaid')){\n\t\t         frappe.throw('Need to set initial charge befor doing this action !')\n                return\n            }\n\t\t    \n\t\t    \n\t\t    let jsonString1 = JSON.stringify(frm.doc);\n\t\t    let jsonString = JSON.parse(jsonString1);\n\t\t    \n\t\t    let d = new frappe.ui.Dialog({\n                title: 'Enter details',\n                fields: [\n                    {\n                        label: 'Force Token',\n                        fieldname: 'doForce',\n                        fieldtype: 'Check'\n                    }\n                ],\n                size: 'small', // small, large, extra-large \n                primary_action_label: 'Submit',\n                primary_action(values) {\n                    console.log(values);\n                    loadDialog.show();\n                     //  frappe.throw('sss')\n\t\t    frappe.call({\n                method: \"initMeter\",\n                type: \"POST\",\n                args: {\n                    meter: frm.doc.name,\n                    doForce: values.doForce,\n                    doc: jsonString\n                },\n                success: function(r) {\n                    frm.refresh_field('meter_token_1_status_');\n                    frm.refresh_field('meter_token_2_status_');\n                    frm.refresh_field('meter_token_3_status_');\n                    frm.refresh_field('init_status');\n                    frm.refresh()\n                    frm.reload_doc();\n                    loadDialog.hide();\n                    console.log(r)\n                },\n                error: function(r) {\n                    loadDialog.hide();\n                    frm.refresh_field('meter_token_1_status_');\n                    frm.refresh_field('meter_token_2_status_');\n                    frm.refresh_field('meter_token_3_status_');\n                    frm.refresh_field('init_status');\n                    frm.refresh()\n                    frm.reload_doc();\n                    console.log(r)\n                },\n                always: function(r) {\n                    loadDialog.hide();\n                    console.log(r)\n                    frm.refresh_field('meter_token_1_status_');\n                    frm.refresh_field('meter_token_2_status_');\n                    frm.refresh_field('meter_token_3_status_');\n                    frm.refresh_field('init_status');\n                    frm.refresh()\n                    frm.reload_doc();\n                }\n            });\n                    d.hide();\n                }\n            });\n\t\t    d.show();\n\t\t \n\t\t    \n\t\t},\"Actions\")\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:57:53.219820",
  "module": "Madkour Meters APP",
  "name": "SyncMeter2",
  "script": "actionNameSync = __(\"Sync Meter\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t\t// Add Buton\n\t\tfrm.add_custom_button(actionNameSync, function() {\n\t\t    \n\t\t    if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1 && frappe.user_roles.indexOf(\"Meters Software Support\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name)\n\t           return\n\t       }\n\t       \n\t       \n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    //Show Loading   \n\t\t    loadDialog.show();\n                \n                 frappe.call({\n                method: \"sync-meter\",\n                type: \"POST\",\n                args: {\n                    meter: frm.doc.name\n                },\n                success: function(r) {\n                    frm.refresh_field('sync_meter_id');\n                    frm.refresh();\n                    frm.reload_doc();\n                    loadDialog.hide();\n                    console.log(r)\n                },\n                error: function(r) {\n                    loadDialog.hide();\n                    frm.refresh_field('sync_meter_id');\n                    frm.refresh();\n                    frm.reload_doc();\n                    console.log(r)\n                },\n                always: function(r) {\n                    loadDialog.hide();\n                    console.log(r)\n                    frm.refresh_field('sync_meter_id');\n                    frm.refresh();\n                    frm.reload_doc();\n                    loadDialog.hide();\n                }\n            });\n        })\n\t}\n})\n\n/*function success (successData,reference,actionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: actionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Meter Sync Completed!'),\n    indicator: 'green',\n    message: __('The meter updated/synced successfully')\n});\n    \n    \n    \n}*/\n\n/*function failed (faileMessage,reference){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: actionNameSync,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}*/\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:58:08.448780",
  "module": "Madkour Meters APP",
  "name": "Set Weekends",
  "script": "let setWeekEndsActionName = __(\"setWeekends\")\nactionData = {}\nbaseURL = \"https://meter01.utilities-madkour.com\"\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t        \n\t\t// Add Buton\n\t\tfrm.add_custom_button(setWeekEndsActionName, function() {\n\t\t    \n\t\t     if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name, setRelayModeActionName)\n\t           return\n\t       }\n\t\t    \n\t\t    if(!frm.doc.sync_meter_id || frm.doc.sync_meter_id === \"\" || frm.doc.sync_meter_id === 0)\n\t            return\n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,setWeekEndsActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,setWeekEndsActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name,setWeekEndsActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n                \n                let d = new frappe.ui.Dialog({\n                    title: __('Enter details'),\n                    fields: [\n                        {\n                            label: 'Sunday',\n                            fieldname: 'sunday',\n                            fieldtype: 'Check'\n                            \n                        },\n                        {\n                            label: 'Monday',\n                            fieldname: 'monday',\n                            fieldtype: 'Check'\n                            \n                        },\n                        {\n                            label: 'Tuesday',\n                            fieldname: 'tuesday',\n                            fieldtype: 'Check'\n                            \n                        },\n                        {\n                            label: 'Wednesday',\n                            fieldname: 'wednesday',\n                            fieldtype: 'Check'\n                            \n                        }, \n                        {\n                            label: 'Thursday',\n                            fieldname: 'thursday',\n                            fieldtype: 'Check'\n                            \n                        }, \n                        {\n                            label: 'Friday',\n                            fieldname: 'friday',\n                            fieldtype: 'Check'\n                            \n                        }, \n                        {\n                            label: 'Saturday',\n                            fieldname: 'saturday',\n                            fieldtype: 'Check'\n                            \n                        },\n                    ],\n                    primary_action_label: __('Submit'),\n                    primary_action(values) {\n                        d.hide();\n                        \n                        //Show Loading   \n\t\t                loadDialog.show();\n                        \n                        //fetch action data\n            \t\t    actionData.meterip = frm.doc.ip\n            \t\t    actionData.meterPort = frm.doc.port\n            \t\t    actionData.metertype = frm.doc.type\n                        actionData.meterPassword = \"-a Low -P \"+frm.doc.password\n                        actionData.meterId = frm.doc.sync_meter_id\n                        actionData.meterAction = 'WriteString'\n                        \n                        actionData.actionValue = \"1.0.135.129.2.255:\" +\n                            (values.monday ? \" 01\" : \"\") +\n                            (values.tuesday ? \" 02\" : \"\") +\n                            (values.wednesday ? \" 03\" : \"\") +\n                            (values.thursday ? \" 04\" : \"\") +\n                            (values.friday ? \" 05\" : \"\") +\n                            (values.saturday ? \" 06\" : \"\") +\n                            (values.sunday ? \" 07\" : \"\")\n                        actionData.actionValue = actionData.actionValue.trim()\n                        \n                        console.log(actionData.actionValue)\n                        \n                        $.post( baseURL+\"/meterActionV2\" , actionData).done(function (response) {\n                            \n                            //showProfile(response)\n                            success(JSON.stringify(response),\n                                    frm.doc.name,\"Value: \" + response, setWeekEndsActionName);\n                        }).fail(function (jqXHR, textStatus, errorThrown) {\n                            failed(\"jqXHR\"+JSON.stringify(jqXHR) +\"#\"+\"textStatus\"+JSON.stringify(textStatus) +\"#\"+\"errorThrown\"+JSON.stringify(errorThrown),\n                                frm.doc.name,setWeekEndsActionName );\n                        });\n                            }\n                            \n                            \n                        });\n        \n                    d.show();\n                \n\n                    \n                }catch(e){\n                    failed (e,frm.doc.name,setWeekEndsActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n\t\n\t\n})\n\n\nfunction success (successData,reference,message,action = readParamActionName){\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: action? action : readParamActionName,\n        type : 'Success',\n        log : successData,\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    frappe.msgprint({\n    title: __('Paramter Retrived'),\n    indicator: 'green',\n    message: __(message)\n});\n\n    \n    \n    \n}\n\n\nfunction failed (faileMessage,reference,meterAction){\n    console.error(faileMessage)\n    \n    //Create Log\n    frappe.db.insert({\n        doctype: 'Meter Transactions Log',\n        reference:reference,\n        action: meterAction,\n        type : 'Failed',\n        log : 'Sync Test Failed with error:' + faileMessage.toString(),\n        data : JSON.stringify(actionData)\n    }).then(doc => {\n        //console.log(doc);\n        loadDialog.hide();\n    })\n    \n    \n    frappe.throw(__(\"Error while execution:\"+faileMessage.toString()))\n}\n\nfunction initLoading(loadingMessage){\n   loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        loadDialog.hide();\n    }\n});\n    \n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:55:57.003621",
  "module": "Madkour Meters APP",
  "name": "set Meter Customer",
  "script": "let setCustomerActionName = __(\"Set Customer\")\nloadDialog = {}\ninitLoading(\"Please Wait, your transaction in progress!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t// Add Buton\n\t\tfrm.add_custom_button(setCustomerActionName, function() {\n\t\t    //Show Loading   \n\t\t    \n\t\t    \n\t\t    let jsonString1 = JSON.stringify(frm.doc);\n\t\t    let jsonString = JSON.parse(jsonString1);\n\t\t    \n\t\t    let d = new frappe.ui.Dialog({\n                title: 'Enter details',\n                fields: [\n                    {\n                        label: 'Customer Name',\n                        fieldname: 'customer',\n                        fieldtype: 'Link',\n                        options: 'Customer',\n                        reqd:1\n                    },\n                    {\n                        label: 'APP No',\n                        fieldname: 'appno',\n                        fieldtype: 'Data',\n                        reqd:1\n                    },\n                    {\n                        label: 'Contract',\n                        fieldname: 'contract',\n                        fieldtype: 'Select',\n                        options:'Prepaid\\nPostpaid',\n                        default:'Prepaid',\n                        reqd:1\n                    },\n                    {\n                        label: 'Tariff Group',\n                        fieldname: 'tariff_group',\n                        fieldtype: 'Select',\n                        options:'Residential\\nCommercial',\n                        default:'Residential',\n                        reqd:1\n                    },\n                    {\n                        label: 'Initial Charge',\n                        fieldname: 'initCharge',\n                        fieldtype: 'Currency',\n                        reqd:1\n                    },\n                    {\n                        label: 'Unit',\n                        fieldname: 'unit',\n                        fieldtype: 'Data',\n                        reqd:1\n                    },\n                    {\n                        label: 'Block',\n                        fieldname: 'block',\n                        fieldtype: 'Data',\n                        reqd:1\n                    },\n                    {\n                        label: 'Area',\n                        fieldname: 'area',\n                        fieldtype: 'Data',\n                        reqd:1\n                    },\n                    {\n                        label: 'Compound',\n                        fieldname: 'compound',\n                        fieldtype: 'Select',\n                        options:'\\nNarges\\nYasmeen\\nChillout\\nGardenia\\nWesal\\nSarai-S1\\nSarai-S2\\nSarai-Facility',\n                        reqd:1\n                    },\n                     {\n                        label: 'Project',\n                        fieldname: 'project',\n                        fieldtype: 'Link',\n                        options: 'Project',\n                        reqd:1\n                    },\n                ],\n                size: 'small', // small, large, extra-large \n                primary_action_label: 'Submit',\n                primary_action(values) {\n                    console.log(values);\n                    loadDialog.show();\n                     //  frappe.throw('sss')\n\t\t    frappe.call({\n                method: \"set-customer-initcharge\",\n                type: \"POST\",\n                args: {\n                    meter: frm.doc.name,\n                    customer: values.customer,\n                    initCharge: values.initCharge,\n                    appno: values.appno,\n                    unit: values.unit,\n                    block: values.block,\n                    area: values.area,\n                    compound: values.compound,\n                    project: values.project,\n                    contract_type: values.contract,\n                    tariff_group:values.tariff_group,\n                    doc: jsonString\n                },\n                success: function(r) {\n                    frm.refresh()\n                    frm.reload_doc();\n                    loadDialog.hide();\n                    console.log(r)\n                },\n                error: function(r) {\n                    frm.refresh()\n                    frm.reload_doc();\n                    console.log(r)\n                    loadDialog.hide();\n                },\n                always: function(r) {\n                    console.log(r)\n                    frm.refresh()\n                    frm.reload_doc();\n                    loadDialog.hide();\n                }\n            });\n                    d.hide();\n                }\n            });\n\t\t    d.show();\n\t\t \n\t\t    \n\t\t})\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:56:08.975800",
  "module": "Madkour Meters APP",
  "name": "Charge Meter V2",
  "script": "\r\nloadDialog = {}\r\ninitLoading(\"Please Wait, your transaction in progress!\")\r\nvar rf_name = ''\r\n\r\nlet isClicked = false\r\nfrappe.ui.form.on('Meters', {\r\n\trefresh(frm) {\r\n     \r\n\t\t// Add Buton\r\n\t\tfrm.add_custom_button(\"Charge Meter V2\", function() {\r\n                \r\n                let d = new frappe.ui.Dialog({\r\n                    title: __('Enter details'),\r\n                    fields: [\r\n                        {\r\n                            label: 'Enter Charge Value [EGP]',\r\n                            fieldname: 'chargeAmount',\r\n                            fieldtype: 'Float',\r\n                            non_negative: 1, \r\n                        },\r\n                        {\r\n                            label: 'Select Charge Type',\r\n                            fieldname: 'chargeType',\r\n                            fieldtype: 'Select',\r\n                            options: ['Station Cash','Station Card'],\r\n                            default: 'Station Card'\r\n                        },\r\n                        {\r\n                            label: 'Charge Credit Refrance',\r\n                            fieldname: 'chargeRef',\r\n                            fieldtype: 'Data',\r\n                            //depends_on: \"eval: doc.chargeType == 'Credit Card'\",\r\n                            reqd: 1\r\n                        }\r\n                    ],\r\n                    primary_action_label: __('Submit'),\r\n                    primary_action(values) {\r\n                        if (isClicked){\r\n                             frappe.msgprint({\r\n                                        title: __('Paramter Retrived'),\r\n                                        indicator: 'red',\r\n                                        message: __('Please Refresh the page before performing this action')\r\n                                    });\r\n                            return\r\n                        } \r\n                        isClicked = true;\r\n                                    \r\n                        d.hide();\r\n                        loadDialog.show()\r\n                        frappe.db.insert({\r\n                            doctype: \"Meter Payment Refrance\",\r\n                            meter: frm.doc.name,\r\n                            payment_source: values['chargeType'],\r\n                            payment_refrance: values['chargeRef'],\r\n                            status: 'Pending',\r\n                            details: JSON.stringify(frm.doc),\r\n                            payfor: frm.doc.customer,\r\n                            amount: values['chargeAmount'],\r\n                            charge_amount: values['chargeAmount'],\r\n                            session_log: JSON.stringify(values),\r\n                            customer:  frm.doc.customer,\r\n                            payment_mid:\"Station\"\r\n                        }).then(doc => {\r\n                            rf_name = doc.name;\r\n                            \r\n                            \r\n                            \r\n                            \r\n                            frappe.call({\r\n                                method: \"charge-meter\",\r\n                                type: \"POST\",\r\n                                freeze: true,\r\n                                args: {\r\n                                    meter: frm.doc.name,\r\n                                    param: values,\r\n                                    rf_name: rf_name\r\n                                },\r\n                                success: function(r) {\r\n                                   \r\n                                    loadDialog.hide();\r\n                                    \r\n                                    const messageString = (`Previouse Balance: ${r.response.currentBalance} EGP <br>\\\r\n                                                    Charge Amount: ${r.response.chargeAmount} EGP <br>\\\r\n                                                    New Balance: ${r.response.newBalance} EGP <br>`)\r\n\r\n                                    console.log(r)\r\n                                    console.log(messageString)\r\n                                   \r\n                                },\r\n                                error: function(r) {\r\n                                    loadDialog.hide();\r\n                                    console.log(r)\r\n                                    \r\n                                    frappe.msgprint({\r\n                                        title: __('Paramter Retrived'),\r\n                                        indicator: 'red',\r\n                                        message: __(r)\r\n                                    });\r\n\r\n                                },\r\n                                always: function(r) {\r\n                                    loadDialog.hide();\r\n                                    if(r)\r\n                                        if(r.response){\r\n                                            const messageString = (`Previouse Balance: ${r.response.currentBalance} EGP <br>\\\r\n                                                            Charge Amount: ${r.response.chargeAmount} EGP <br>\\\r\n                                                            New Balance: ${r.response.newBalance} EGP <br>\r\n                                                            ${r.error?r.error:'' }`)\r\n        \r\n                                            frappe.msgprint({\r\n                                                title: __('Paramter Retrived'),\r\n                                                indicator: 'red',\r\n                                                message: __(messageString)\r\n                                            });\r\n                                            \r\n                                        }\r\n\r\n                                    console.log(r)\r\n                                    //console.log(messageString)\r\n            \r\n                              }\r\n                            });\r\n                            // frappe.msgprint(\"Hello\")\r\n                        \r\n                            // Additional logic if needed\r\n                        });\r\n\r\n\r\n                \r\n    \r\n                            }\r\n                            \r\n                            \r\n                        });\r\n        \r\n                    d.show();\r\n            \r\n        }, __(\"Actions\"))\r\n\t}\r\n})\r\nfunction initLoading(loadingMessage){\r\n   loadDialog = new frappe.ui.Dialog({\r\n    title: 'Loading',\r\n    fields: [\r\n        {\r\n            label: loadingMessage,\r\n            fieldname: 'message',\r\n            fieldtype: 'Heading'\r\n        }\r\n    ],\r\n    primary_action_label: 'Ok',\r\n    primary_action(values) {\r\n        loadDialog.hide();\r\n    }\r\n});\r\n    \r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meters",
  "enabled": 1,
  "modified": "2025-03-02 23:56:56.561088",
  "module": "Madkour Meters APP",
  "name": "Load Meter Profiles",
  "script": "let actionNameLoadMeterProfiles = __(\"Load Meter Profiles\")\nactionData = {}\nlet actionNameLoadMeterProfiles_loadDialog = {}\nactionNameLoadMeterProfiles_initLoading(\"Your Transaction in progress!, expected to be completed in 4min!\")\n\nfrappe.ui.form.on('Meters', {\n\trefresh(frm) {\n\t\t// Add Buton\n\t\tfrm.add_custom_button(actionNameLoadMeterProfiles, function() {\n\t\t    \n\t\t    /*if (frappe.user_roles.indexOf(\"Meter Manager Role\")==-1 && frappe.user_roles.indexOf(\"Meters Software Support\")==-1){\n\t           failed (\"You don't have permission for this action !\",frm.doc.name)\n\t           return\n\t       }*/\n\t       \n\t       \n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    //Show Loading   \n\t\t    actionNameLoadMeterProfiles_loadDialog.show();\n                \n                 frappe.call({\n                method: \"load-meter-profile\",\n                type: \"POST\",\n                args: {\n                    meter: frm.doc.name\n                },\n                success: function(r) {\n                    actionNameLoadMeterProfiles_loadDialog.hide();\n                    console.log(r)\n                },\n                error: function(r) {\n                    actionNameLoadMeterProfiles_loadDialog.hide();\n                    console.log(r)\n                },\n                always: function(r) {\n                    actionNameLoadMeterProfiles_loadDialog.hide();\n                }\n            });\n            \n            actionNameLoadMeterProfiles_loadDialog.hide();\n        })\n\t}\n})\n\nfunction actionNameLoadMeterProfiles_initLoading(loadingMessage){\n   actionNameLoadMeterProfiles_loadDialog = new frappe.ui.Dialog({\n    title: 'Loading',\n    fields: [\n        {\n            label: loadingMessage,\n            fieldname: 'message',\n            fieldtype: 'Heading'\n        }\n    ],\n    primary_action_label: 'Ok',\n    primary_action(values) {\n        actionNameLoadMeterProfiles_loadDialog.hide();\n    }\n});\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meter Payment Refrance",
  "enabled": 1,
  "modified": "2025-03-02 23:56:45.511382",
  "module": "Madkour Meters APP",
  "name": "Mark As Success Manually",
  "script": "let markAsSuccessManuallyActionName = __(\"Mark As Success Manually\")\ninitLoading(\"Please Wait, your transaction in progress!\")\n\ndoc = {}\n\nfrappe.ui.form.on('Meter Payment Refrance', {\n\trefresh(frm) {\n\t\t// Add Buton\n\t\tfrm.add_custom_button(markAsSuccessManuallyActionName, function() {\n\n\t        \n\t       if (frappe.user_roles.indexOf(\"Meters Customer Service\")==-1){\n\t           failed (__(\"You don't have permission for this action !\"),frm.doc.name, markAsSuccessManuallyActionName)\n\t           return\n\t       }\n\t            \n\t\t    \n\t\t    //Validate the data is saved befor any operations\n\t\t    if(frm.doc.__islocal){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, markAsSuccessManuallyActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if(frm.is_new()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, markAsSuccessManuallyActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t        \n\t\t    if (frm.is_dirty()){\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, markAsSuccessManuallyActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    if (frm.doc.status != \"Charge Failed\" && frm.doc.status != \"Charge Retry Failed\"){\n\t\t        failed (\"The charge need to be failed to perform this action!\",frm.doc.name, markAsSuccessManuallyActionName)\n\t\t        return\n\t\t        \n\t\t    }\n\t\t    \n\t\t    try{\n\t\t        \n                frappe.call({\n                                method: \"markPaymentAsSuccessManually\",\n                                type: \"POST\",\n                                args: {\n                                    payment_referance: frm.doc.name,\n                                },\n                                success: function(r) {\n                                    \n                                },\n                                error: function(r) {\n                                    \n                                    frappe.msgprint({\n                                        title: __('Paramter Retrived'),\n                                        indicator: 'red',\n                                        message: __(r)\n                                    });\n\n                                },\n                                always: function(r) {\n\n                                    console.log(r)\n\n                              }\n                            });\n\n                    \n                }catch(e){\n                    failed (e, doc.name,markAsSuccessManuallyActionName)\n                }\n            \n        }, __(\"Actions\"))\n\t}\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meter Payment Refrance",
  "enabled": 1,
  "modified": "2025-03-02 23:56:03.121632",
  "module": "Madkour Meters APP",
  "name": "Recharge Charge Meter V2",
  "script": "\r\nloadDialog = {}\r\ninitLoading(\"Please Wait, your transaction in progress!\")\r\nvar rf_name = ''\r\nfrappe.ui.form.on('Meter Payment Refrance', {\r\n\trefresh(frm) {\r\n     \r\n\t\t// Add Buton\r\n\t\tfrm.add_custom_button(\"Charge Meter Retry V2\", function() {\r\n\t\t    \r\n\t\t    \r\n\t\t    // if (frappe.user_roles.indexOf(\"Meters Software Support\")==-1){\r\n\t\t    if (frappe.user_roles.indexOf(\"Meters Customer Service\")==-1){\r\n\t           failed (__(\"You don't have permission for this action !\"),frm.doc.name, chargeMeterActionName)\r\n\t           return\r\n\t       }\r\n\t            \r\n\t\t    \r\n\t\t    //Validate the data is saved befor any operations\r\n\t\t    if(frm.doc.__islocal){\r\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, chargeMeterActionName)\r\n\t\t        return\r\n\t\t        \r\n\t\t    }\r\n\t\t    \r\n\t\t    if(frm.is_new()){\r\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, chargeMeterActionName)\r\n\t\t        return\r\n\t\t        \r\n\t\t    }\r\n\t\t        \r\n\t\t    if (frm.is_dirty()){\r\n\t\t        failed (\"You need to save befor any operations!\",frm.doc.name, chargeMeterActionName)\r\n\t\t        return\r\n\t\t        \r\n\t\t    }\r\n\t\t    \r\n\t\t    if (frm.doc.status != \"Charge Failed\" && frm.doc.status != \"Charge Retry Failed\"){\r\n\t\t        failed (\"The charge need to be failed to perform this action!\",frm.doc.name, chargeMeterActionName)\r\n\t\t        return\r\n\t\t        \r\n\t\t    }\r\n                \r\n                let d = new frappe.ui.Dialog({\r\n                    title: __('Enter details'),\r\n                    fields: [\r\n                        {\r\n                            label: 'Charge Value [EGP]',\r\n                            fieldname: 'chargeAmount',\r\n                            fieldtype: 'Float',\r\n                            non_negative: 1, \r\n                            reqd: 1,\r\n                            read_only: 1,\r\n                            default: frm.doc.charge_amount\r\n                        }\r\n                    ],\r\n                    primary_action_label: __('Submit'),\r\n                    primary_action(values) {\r\n                        d.hide();\r\n                        loadDialog.show()\r\n\r\n\r\n                        rf_name = frm.doc.name;\r\n\r\n                        frappe.call({\r\n                            method: \"charge-meter\",\r\n                            type: \"POST\",\r\n                            freeze: true,\r\n                            args: {\r\n                                meter: frm.doc.meter,\r\n                                param: values,\r\n                                rf_name: rf_name\r\n                            },\r\n                            success: function(r) {\r\n                               \r\n                                loadDialog.hide();\r\n                                \r\n                                const messageString = (`Previouse Balance: ${r.response.currentBalance} EGP <br>\\\r\n                                                Charge Amount: ${r.response.chargeAmount} EGP <br>\\\r\n                                                New Balance: ${r.response.newBalance} EGP <br>`)\r\n\r\n                                console.log(r)\r\n                                console.log(messageString)\r\n                               \r\n                            },\r\n                            error: function(r) {\r\n                                loadDialog.hide();\r\n                                console.log(r)\r\n                                \r\n                                frappe.msgprint({\r\n                                    title: __('Paramter Retrived'),\r\n                                    indicator: 'red',\r\n                                    message: __(r)\r\n                                });\r\n\r\n                            },\r\n                            always: function(r) {\r\n                                loadDialog.hide();\r\n                                if(r)\r\n                                    if(r.response){\r\n                                        const messageString = (`Previouse Balance: ${r.response.currentBalance} EGP <br>\\\r\n                                                        Charge Amount: ${r.response.chargeAmount} EGP <br>\\\r\n                                                        New Balance: ${r.response.newBalance} EGP <br>\r\n                                                        ${r.error?r.error:'' }`)\r\n    \r\n                                        frappe.msgprint({\r\n                                            title: __('Paramter Retrived'),\r\n                                            indicator: 'red',\r\n                                            message: __(messageString)\r\n                                        });\r\n                                        \r\n                                    }\r\n\r\n                                console.log(r)\r\n                                //console.log(messageString)\r\n        \r\n                          }\r\n                        });\r\n                        // frappe.msgprint(\"Hello\")\r\n                    \r\n                        // Additional logic if needed\r\n                        }\r\n\r\n                            \r\n                        });\r\n        \r\n                    d.show();\r\n            \r\n        }, __(\"Actions\"))\r\n\t}\r\n})\r\nfunction initLoading(loadingMessage){\r\n   loadDialog = new frappe.ui.Dialog({\r\n    title: 'Loading',\r\n    fields: [\r\n        {\r\n            label: loadingMessage,\r\n            fieldname: 'message',\r\n            fieldtype: 'Heading'\r\n        }\r\n    ],\r\n    primary_action_label: 'Ok',\r\n    primary_action(values) {\r\n        loadDialog.hide();\r\n    }\r\n});\r\n    \r\n}\r\n",
  "view": "Form"
 }
]
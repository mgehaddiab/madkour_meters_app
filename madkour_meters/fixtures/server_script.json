[
 {
  "allow_guest": 0,
  "api_method": "get_meta",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.612357",
  "module": "Madkour Meters APP",
  "name": "get_meta",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "dt = frappe.form_dict['doctype']\ndata = frappe.get_meta(dt)\nfrappe.response['data'] = data",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.169052",
  "module": "Madkour Meters APP",
  "name": "Generate Meter Action Item",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Bulk Meter Action",
  "script": "meters = doc.meters\n\nfor meter in meters:\n    meterType = frappe.get_doc('Meter Type', doc.meter_type )\n    meterDoc = frappe.get_doc('Meters', meter.meter )\n    \n    \n    \n    if meter.type == meterType.type_name:\n        item = {}\n        for paramItem in doc.meter_param_list:\n            parmMetersType = frappe.get_doc('Meter Type Param Set', paramItem.param )\n            for paramMeterType in parmMetersType.type_param:\n                meterTypeObject = frappe.get_doc('Meter Type', paramMeterType.meter_type)\n                if meterTypeObject.type_name == meter.type:\n                    item = frappe.new_doc('Bulk Meter Action Item')\n                    item.bulk_ref = doc.name\n                    item.meter_ref = meter.meter\n                    item.action = doc.action\n                    \n                   \n                    \n                    if item.action == \"Read\" :\n                        item.value =  paramMeterType.obis + \":\" + paramMeterType.attr_index\n                    elif (item.action == \"WriteString\") & paramMeterType.hex:\n                        values =  paramItem.value\n                        values = values.replace(\"-\",\" \").replace(\":\",\" \").split()\n                        valueOctString = \"\"\n                        for value in values:\n                            value = hex(int(value)).replace(\"0x\",\"\")\n                            if (len(value) % 2) == 0 :\n                                value = value\n                            else:\n                                 value = \"0\"+ value \n                            valueOctString = valueOctString + \" \" + value\n                        \n                        item.value =  paramMeterType.obis + \":\" + valueOctString\n                    elif item.action == \"SetCurrentTime\" or item.action == \"WriteRegINT32\" or item.action == \"SetIntStruct\" or item.action == \"WriteString\":\n                        item.value =  paramMeterType.obis + \":\" + paramItem.value\n                    \n                    elif item.action == \"SetActivityCalderDate\":\n                         item.value = paramMeterType.obis + \":\" + paramMeterType.attr_index + \":\" + paramItem.value\n                    elif item.action == \"SystemLoadProfile\" :\n                         item.value = json.dumps({\n                             \"metertype\" : meter.type,\n                             \"meterId\" : meterDoc.sync_meter_id\n                         })\n                    \n                        \n                    else:\n                        #item = frappe.new_doc('Bulk Meter Action Item')\n                        item.value = paramItem.value\n                        item.status = \"Failed\"\n                        item.result = \"Non Supported Action (\"+item.action+\") for paramter (\" + parmMetersType.param_name + \") at Meter (\" + meter.meter +\")\"\n                        #item.insert()\n                        \n                    \n                    item.insert(ignore_permissions=True)\n                    #frappe.throw(item.value)\n            \n            if not item:\n                item = frappe.new_doc('Bulk Meter Action Item')\n                item.bulk_ref = doc.name\n                item.meter_ref = meter.meter\n                item.action = doc.action\n                item.value = paramItem.value\n                item.status = \"Failed\"\n                item.result = \"Non Supported Model (\"+meter.type+\") for paramter (\" + parmMetersType.param_name + \") at Meter (\" + meter.meter +\")\"\n                item.insert(ignore_permissions=True)\n                #frappe.throw(item.value)\n            \n            #item = frappe.new_doc('Bulk Meter Action Item')\n            #item.bulk_ref = doc.name\n            #item.meter_ref = meter.meter\n            #item.action = doc.action\n            #item.value = doc.value\n            #item.insert()\n            #frappe.throw(doc.name)\n    else:\n        item = frappe.new_doc('Bulk Meter Action Item')\n        item.bulk_ref = doc.name\n        item.meter_ref = meter.meter\n        item.action = doc.action\n        #item.value = paramItem.value\n        item.status = \"Failed\"\n        item.result = \"Non Correct Meter type (\"+meter.type+\") at Meter (\" + meter.meter +\")\"\n        item.insert(ignore_permissions=True)\n        \n        \n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:38.425467",
  "module": "Madkour Meters APP",
  "name": "Auto Create Meter Online Users",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Online Payment User",
  "script": "customerName = doc.customer_name_link\nemail = doc.customer_email\npassword = doc.user_password\nmobile_number = doc.mobile_number\n\n# Query Customer by Name\ncustomer_doc = frappe.get_doc(\"Customer\", customerName)\ncustomer_name = customer_doc.get(\"customer_name\")\ncustomer_contacts = customer_doc.customer_primary_contact\n\nexisting_contact = customer_doc.get(\"customer_name\")\nnames = customerName.split(' ')\nfirst_name = (names[0] if names else '')[0:50]\nlast_name = ''.join(names[1:]) if len(names) > 1 else ''\n\nif  not customer_contacts:\n    existing_contact = frappe.get_all(\"Contact\", filters={\"link_name\":doc.customer_name_link})\n    if existing_contact:\n        contact = frappe.get_doc(\"Contact\", existing_contact[0][\"name\"])\n        contact.is_primary_contact = 1\n        isContactEmailExists = False\n        for email_id in contact.email_ids:\n            if(email_id.email_id == email):\n                isContactEmailExists = True\n\n        if not isContactEmailExists:\n            contact.append(\"email_ids\",{\n            \"email_id\": email,\n            \"is_primary\": 1,\n        })\n          \n            contact.save(ignore_permissions=True)\n\n        customer_doc.customer_primary_contact = contact.name\n        customer_doc.save(ignore_permissions=True)\n        doc.contact_reference = contact.name\n        customer_contacts = contact.name\n\n\n    else:\n        contact = frappe.get_doc({\n        \"doctype\": \"Contact\",\n        \"first_name\": first_name,\n        \"last_name\": last_name,\n        \"is_primary_contact\": 1,\n\n \n\n        })\n        contact.append(\"links\", {\n            \"link_doctype\": \"Customer\",\n            \"link_name\": customer_doc.name,\n        })\n        contact.append(\"email_ids\",{\n            \"email_id\": email,\n            \"is_primary\": True\n        })\n        contact.append(\"phone_nos\",{\n            \"phone\": mobile_number,\n            \"is_primary_phone\": True,\n            \"is_primary_mobile_no\": True,\n        })\n        contact.insert(ignore_permissions=True)\n        doc.contact_reference = contact.name \n        customer_doc.customer_primary_contact = contact.name\n        customer_doc.save(ignore_permissions=True)\n        customer_contacts = contact.name\nelse:\n    contact_doc = frappe.get_doc(\"Contact\", customer_contacts)\n    contact_email = contact_doc.email_id\n    if contact_email != email:\n        for email_id_current_contact in contact_doc.email_ids:\n            email_id_current_contact.is_primary = False\n\n        contact_doc.append(\"email_ids\",{\n            \"email_id\": email,\n            \"is_primary\": True\n        })\n\n        contact_doc.save()\n        customer_doc.customer_primary_contact = contact_doc.name\n        customer_doc.save(ignore_permissions=True)\n        customer_contacts = contact_doc.name\n        doc.contact_reference = contact_doc.name\n\nmatched_users = frappe.get_all(\"User\", filters={\"email\": email }, fields=[\"name\",\"email\"])\nuser = {}\nif not matched_users :\n    user = frappe.get_doc({\n        \"doctype\": \"User\",\n        \"email\": email,\n        \"first_name\": first_name,\n        \"last_name\": last_name,\n        })\n\n    user.insert(ignore_permissions=True)\nelse:\n    user = frappe.get_doc(\"User\", matched_users[0].name)\n\ndoc.contact_reference = customer_contacts\n\ndoc.user_reference = user.name\n\ncontact = frappe.get_doc(\"Contact\",customer_contacts)\ncontact.user = user.name\ncontact.save(ignore_permissions=True)\n\nuser.new_password = password\nuser.save(ignore_permissions=True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "meters-readAction",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:47.437036",
  "module": "Madkour Meters APP",
  "name": "Meters Read API",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "def insert_log(log_data, log_type=\"Success\"):\n    log_doc = frappe.get_doc({\n        \"doctype\": \"Meter Transactions Log\",\n        \"reference\": meter.name,\n        \"action\": \"Read\",\n        \"type\": log_type,\n        \"log\": log_data,\n        \"data\": json.dumps(actionData)\n    })\n    log_doc.insert(ignore_permissions = True)\n    log_doc.save(ignore_permissions=True)\n    frappe.response['log'] = log_doc\n\nbaseURL = \"https://meter01.utilities-madkour.com\"\nmeterRef = frappe.form_dict.meterId\nmeterActionValue = frappe.form_dict.actionValue\nmeterAction = frappe.form_dict.action\n\nmeter = frappe.get_doc(\"Meters\", meterRef)\n\ntry:\n    actionData = {\n            \"meterip\" : meter.ip,\n            \"meterPort\" : meter.port,\n            \"metertype\" : meter.type,\n            \"meterSerial\" : meter.serial,\n            \"meterPassword\" : \"-a Low -P \"+ meter.password,\n            \"meterId\" : meter.sync_meter_id,\n            \"meterAction\" : meterAction,\n            \"actionValue\" : meterActionValue\n        }\n    response = frappe.make_post_request(baseURL + \"/meterActionV2\", data=actionData)\n    insert_log(log_data = json.dumps(response) ,log_type = \"Success\" )\n    \n    \n    \n    frappe.response['message'] = response\nexcept Exception as e:\n    insert_log(log_data = e,log_type = \"Failed\" )\n    frappe.response['message'] = e\n#try:\n    \n\n    # Insert log data\n#    insert_log(doc, response)\n\n    \n\n#except Exception as e:\n    # Insert error log data\n#    insert_log(doc, str(e), log_type=\"Failed\")\n#    frappe.log_error(str(e))\n#    frappe.throw(\"An error occurred: \" + str(e))\n\n#def insert_log(log_data, log_type=\"Success\"):\n#    log_doc = frappe.get_doc({\n#        \"doctype\": \"Meter Transactions Log\",\n#        \"reference\": meter.name,\n#        \"action\": meterAction,\n#        \"type\": log_type,\n#        \"log\": log_data,\n#        \"data\": actionData\n#    })\n#    log_doc.insert()\n    \n#    def get_action_value_for_parameter(param, metertype):\n#        if param == \"Error Status\":\n#            return \"0.0.97.97.0.255:2\"\n#       elif param == \"Date/Time\":\n#            return \"0.0.1.0.0.255:2\"\n#        elif param == \"Meter Serial\":\n#            return \"0.0.96.1.0.255:2\"\n#        elif param == \"Meter Balance\" and \"Electrometer\" in metertype:\n#            return \"0.0.19.0.0.255:5\"\n#        elif param == \"Meter Balance\" and \"Iskraemeco\" in metertype:\n#            return \"1.65.1.140.1.255:2\"\n#        elif param == \"Meter Balance\" and \"Quill\" in metertype:\n#            return \"1.0.140.129.0.255:2\"\n#        elif param == \"Relay Status\":\n#            return \"0.0.96.3.10.255:3\"\n#        elif param == \"Relay Mode\":\n#            return \"0.0.96.3.10.255:4\"\n#        elif param == \"Read Backup Tariff\" and \"Iskraemeco\" in metertype:\n#            return \"1.65.0.101.1.255:2;1.65.0.111.1.255:2;1.65.1.152.21.255:2;1.65.0.101.2.255:2;1.65.0.111.2.255:2;1.65.1.152.22.255:2;1.65.0.101.3.255:2;1.65.0.111.3.255:2;1.65.1.152.23.255:2;1.65.0.101.4.255:2;1.65.0.111.4.255:2;1.65.1.152.24.255:2;1.65.0.101.5.255:2;1.65.0.111.5.255:2;1.65.1.152.25.255:2;1.65.0.101.6.255:2;1.65.0.111.6.255:2;1.65.1.152.26.255:2;1.65.0.101.7.255:2;1.65.0.111.7.255:2;1.65.1.152.27.255:2;1.65.0.101.8.255:2;1.65.0.111.8.255:2;1.65.1.152.28.255:2;1.65.0.101.9.255:2;1.65.0.111.9.255:2;1.65.1.152.29.255:2;1.65.0.101.10.255:2;1.65.1.152.30.255:2;0.128.96.2.8.255:2;1.65.1.152.11.255:2;0.128.96.2.10.255:2\"\n#        elif param == \"Read Backup Tariff\" and \"Quill\" in metertype:\n#            return \"1.0.130.135.5.255:2;1.0.130.135.6.255:2;1.0.130.135.6.255:2;1.0.130.135.8.255:2\"\n#        elif param == \"Read Active Tariff\" and \"Iskraemeco\" in metertype:\n#            return \"1.65.0.103.1.255:2;1.65.0.113.1.255:2;1.65.0.103.2.255:2;1.65.0.113.2.255:2;1.65.0.103.3.255:2;1.65.0.113.3.255:2;1.65.0.103.4.255:2;1.65.0.113.4.255:2;1.65.0.103.5.255:2;1.65.0.113.5.255:2;1.65.0.103.6.255:2;1.65.0.113.6.255:2;1.65.0.103.7.255:2;1.65.0.113.7.255:2;1.65.0.103.8.255:2;1.65.0.113.8.255:2;1.65.0.103.9.255:2;1.65.0.113.9.255:2;1.65.0.103.10.255:2\"\n#        else:\n#            return \"default_action_value\"\n            \n#        pass\n        \n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.469129",
  "module": "Madkour Meters APP",
  "name": "Validate Meter Add",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "meter_type = doc.type\n\nexisting_records = None\n\nif \"Electrical\" in meter_type: \n    existing_records = frappe.get_all(doc.doctype, filters={\n        \"ip\": doc.ip,\n        \"port\": doc.port,\n#        \"serial\": doc.serial,\n#        \"type\": doc.type\n    })\n\nelse:\n    existing_records = frappe.get_all(doc.doctype, filters={\n        \"ip\": doc.ip,\n        \"port\": doc.port,\n #       \"type\": doc.type\n    })\n\nold_doc = doc.get_doc_before_save()\nif(old_doc):\n    if len(existing_records) > 1:\n        frappe.throw(\"Value is already used in other records.\")\nelse:\n    if existing_records :\n        frappe.throw(\"Value is already used in other records.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.555427",
  "module": "Madkour Meters APP",
  "name": "Create Installments Per Month",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Installments Meters",
  "script": "# from datetime import datetime\r\nif doc.paid_amount < 0 or doc.total_value < 0:\r\n\tfrappe.throw(\"Please enter a valid number\")\r\nif (frappe.db.exists(doc.doctype, doc.name)):\r\n\tfrappe.throw(\"You cannot create more than one installment for this meter\")\r\n\r\nif doc.paid_amount > doc.total_value:\r\n\tfrappe.throw('Paid amount must be less than total value.')\r\n\r\n# frappe.throw(frappe.utils.getdate())\r\n# date_obj = datetime.strptime(doc.start_date, \"%Y-%m-%d\")\r\ndate_obj = frappe.utils.getdate(str(doc.start_date))\r\n# frappe.throw(date_obj)\r\nflag_payment = 0\r\n# Extract the date part as a datetime.date object\r\n# date_only = date_obj.date()\r\n# frappe.throw(str(date_only))\r\nif date_obj < frappe.utils.getdate():\r\n    # frappe.throw(\"sss\")\r\n\tflag_payment = 0\r\n\tvalue_per_month = float(doc.total_value) / float(doc.installment_term)\r\n\t# frappe.throw('No')\r\n\tresult = doc.paid_amount / value_per_month\r\n\tif not result.is_integer():\r\n\t\tfrappe.throw('Paid amount must be a 0, a month or multiples.')\r\n\telse:\r\n\t\tstart_date = frappe.utils.getdate(doc.start_date) \r\n\t\tend_date = frappe.utils.getdate()\r\n\t\tmonths_between = (end_date.year - start_date.year) * 12 + (end_date.month - start_date.month)\r\n\t\tif not months_between + 1 >= result and doc.paid_amount != 0:\r\n\t\t\tfrappe.throw(\"You're not allowed to prepay or paid amount must equal to 0 or a month.\") \r\n# if doc.paid_amount == (float(doc.total_value) / float(doc.installment_term)):\r\nif date_obj == frappe.utils.getdate():\r\n\tflag_payment = 0\r\n\tif doc.paid_amount != (float(doc.total_value) / float(doc.installment_term)):\r\n\t\tfrappe.throw(\"You cannot pay more or less than a month\")\r\n\telse:\r\n\t\tif not doc.paid_amount == float(0):\r\n\t\t\tflag_payment = 1\r\n\t\t\r\nif date_obj > frappe.utils.getdate():\r\n\tif doc.paid_amount != 0:\r\n\t\tfrappe.throw(\"You're not allowed to prepay and paid amount must equal to 0 or a month.\")\r\n\r\n\r\nfor i in range(int(doc.installment_term)):\r\n\tdoc.append(\"table\", {\r\n\t\t\"date\":  frappe.utils.add_to_date(doc.start_date, months=i),\r\n\t\t\"value_to_pay\": float(doc.total_value) / float(doc.installment_term),\r\n\t\t\"status\": \"Unpaid\"\r\n\t})\r\n\r\nvalue_per_month = float(doc.total_value) / float(doc.installment_term)\r\n# frappe.throw('No')\r\nresult = doc.paid_amount / value_per_month\r\nif not result.is_integer():\r\n\tfrappe.throw(\"You have to pay a month or multiples.\")\r\nelse:\r\n\tfor row in range(int(result)):\r\n\t\tdoc.table[row].status = 'Paid'\r\n\t\tif flag_payment == 1:\r\n\t\t\tpayment_entry = frappe.get_doc({\r\n\t\t\t'doctype': 'Payment Entry',\r\n\t\t\t'payment_type': 'Receive',\r\n\t\t\t'party_type': 'Customer',\r\n\t\t\t'party': doc.customer,  # Replace with the actual customer\r\n\t\t\t'paid_to': '1110 - Cash - MU',  # Replace with the actual account\r\n\t\t\t'mode_of_payment': 'Cash',\r\n\t\t\t'reference_no': f\"Installment | {doc.table[row].date} | {doc.serial}\",  # Replace with the actual payment mode\r\n\t\t\t'received_amount': doc.table[row].value_to_pay,  # Replace with the actual amount\r\n\t\t\t'paid_amount': doc.table[row].value_to_pay,  # Replace with the actual amount\r\n\t\t\t}).insert(ignore_permissions = True)\r\n\t\t\tdoc.table[row].reference_name = payment_entry.name",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "server",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.509784",
  "module": "Madkour Meters APP",
  "name": "server",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# from frappe import get_doc\r\n\r\n# Fetch the document you want to update\r\ndoc = frappe.get_doc(\"Installment Table\", frappe.form_dict.name)\r\n\r\n# Update the fields you want\r\ndoc.status = \"Paid\"\r\ndoc.reference_name = frappe.form_dict.pename\r\n\r\n# Save the document to apply the updates\r\ndoc.save()\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:47.730422",
  "module": "Madkour Meters APP",
  "name": "Create Meter Tokens",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "if not doc.initial_charge_amount:\n    doc.initial_charge_amount = 0\n    \nif doc.init_status == 0 and doc.customer is not None:\n\n    baseURL = \"https://meter01.utilities-madkour.com\"\n    getTokenData = {}\n    \n    getTokenData['meterip'] = doc.ip\n    getTokenData['meterPort'] = doc.port\n    getTokenData['metertype'] = doc.type\n    getTokenData['meterPassword'] = \"-a Low -P \" + doc.password\n    getTokenData['meterId'] = doc.sync_meter_id\n    getTokenData['meterSerial'] = doc.serial\n    getTokenData['meterBalance'] = \"0.0.19.0.0.255:5\"\n    getTokenData['meterAction'] = 'initCharge'\n    getTokenData['actionValue'] = doc.initial_charge_amount\n    getTokenData['name'] = doc.name\n    \n    if \"Electrometer\" in getTokenData[\"metertype\"]:\n        getTokenData[\"meterBalance\"] = \"0.0.19.0.0.255:5\"\n    \n    if \"Iskraemeco\" in getTokenData[\"metertype\"]:\n        getTokenData[\"meterBalance\"] = \"1.65.1.140.1.255:2\"\n    \n    if \"Quill\" in getTokenData[\"metertype\"]:\n        getTokenData[\"meterBalance\"] = \"1.0.140.129.0.255:2\"\n    \n    if \"Quill\" in getTokenData[\"metertype\"]:    \n        try:\n            response = frappe.make_post_request(baseURL + \"/getTokens\", data=getTokenData)\n            doc.token_1 = response[0]\n            doc.token_2 = response[1]\n            doc.token_3 = response[2]\n            doc.token_creation_date = frappe.utils.now()\n            #success(actionData, response, doc.name, \"Value: \" + str(response[0]) , readParamActionName + \":\" + param)\n            #frappe.throw(response)\n        except Exception as e:\n            frappe.throw(e)\n            #failed(actionData, \"jqXHR\" + str(e), doc.name, readParamActionName + \":\" + param)\n            \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "initMeter",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:47.860908",
  "module": "Madkour Meters APP",
  "name": "InitMeter API",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "baseURL = \"https://meter01.utilities-madkour.com\"\nmeterName = frappe.form_dict.meter\ndoForce = str(frappe.form_dict.doForce) == '1'\n#frappe.throw(str(doForce))\n \n\ndoc = frappe.get_doc(\"Meters\",meterName)\nwriteData = {}\n\nwriteData['name'] = doc.name\nwriteData['meterip'] = doc.ip\nwriteData['meterPort'] = doc.port\nwriteData['metertype'] = doc.type\nwriteData['meterPassword'] = \"-a Low -P \" + doc.password\nwriteData['meterId'] = doc.sync_meter_id\nwriteData['meterSerial'] = doc.serial\nwriteData['meterAction'] = 'WriteString'\n\nif not doc.initial_charge_amount : \n    doc.initial_charge_amount = 0\n    \nif \"Quill\" in doc.type:\n\n    \n\n    #1st    \n    writeData['actionValue'] = '1.0.129.129.2.255:'+ doc.token_2\n\n    if doc.meter_token_2_status_ == 0 or doForce:\n        try:\n            response = frappe.make_post_request(baseURL + \"/meterActionV2\", data=writeData)\n           \n            #frappe.throw(response)\n        except Exception as e:\n            frappe.response['token_2_error'] = e\n            #frappe.throw(str(e))\n        else:\n            doc.meter_token_2_status_ = 1\n            doc.token_2_completed_date = frappe.utils.now()\n            doc.save(ignore_permissions=True)\n            \n            new_doc = frappe.get_doc({\n                'doctype': 'Meter Transactions Log',\n                'reference': doc.name,\n                'action': 'Generate Token 2',\n                'type': 'Success',\n                'log': str(response),  # Remove single quotes here\n                'data': str(list(doc.token_2)),  # Serialize data_dict to JSON\n            })\n            new_doc.insert()\n            frappe.db.commit()\n\n    if doc.meter_token_1_status_ == 0 or doForce:\n        #2nd\n        writeData['actionValue'] = '1.0.129.129.2.255:'+ doc.token_1\n        try:\n            response = frappe.make_post_request(baseURL + \"/meterActionV2\", data=writeData)\n            \n            #frappe.throw(response)\n        except Exception as e:\n            frappe.response['token_1_error'] = e\n            #frappe.throw(str(e))\n        else:\n            doc.meter_token_1_status_ = 1\n            doc.token_1_completed_date = frappe.utils.now()\n            doc.save(ignore_permissions=True)\n            \n            new_doc = frappe.get_doc({\n                'doctype': 'Meter Transactions Log',\n                'reference': doc.name,\n                'action': 'Generate Token 1',\n                'type': 'Success',\n                'log': str(response),  # Remove single quotes here\n                'data': str(list(doc.token_1)),  # Serialize data_dict to JSON\n            })\n            new_doc.insert()\n            frappe.db.commit()\n\n    #frappe.response['message'] = \"ok\"\n    if (doc.meter_token_3_status_ == 0  or doForce) and (doc.contract_type != 'Postpaid'):\n    #3rd\n        writeData['actionValue'] = '1.0.129.129.2.255:'+ doc.token_3\n        try:\n            response = frappe.make_post_request(baseURL + \"/meterActionV2\", data=writeData)\n            \n            #frappe.throw(response)\n        except Exception as e:\n            frappe.response['token_3_error'] = e\n            #frappe.throw(str(e))\n        else:\n            doc.meter_token_3_status_ = 1\n            doc.init_status = 1\n            doc.token_3_completed_date = frappe.utils.now()\n            doc.save(ignore_permissions=True)\n            \n            new_doc = frappe.get_doc({\n                'doctype': 'Meter Transactions Log',\n                'reference': doc.name,\n                'action': 'Generate Token 3',\n                'type': 'Success',\n                'log': str(response),  # Remove single quotes here\n                'data': str(list(doc.token_3)),  # Serialize data_dict to JSON\n            })\n            new_doc.insert()\n            frappe.db.commit()\n    \n    new_doc = frappe.get_doc({\n                'doctype': 'Meter Transactions Log',\n                'reference': doc.name,\n                'action': 'Generate Token Status',\n                'type': 'Success',\n                'log': str(frappe.response),  # Remove single quotes here\n                'data': str(frappe.response),  # Serialize data_dict to JSON\n            })\n    new_doc.insert()\n    frappe.db.commit()\nelse:\n    # json = frappe.get_doc(json.loads(frappe.form_dict.doc))\n    # frappe.throw(str(doc.initial_charge_amount))\n    if doc.initial_charge_amount > float(0) and doc.initstatus == 0:\n        \n        writeData['meterAction'] = \"AddCredit\"\n\n        if \"Electrometer\" in doc.type:\n            writeData['meterBalance'] = \"0.0.19.0.0.255:5\"\n            writeData['actionValue'] = str(doc.initial_charge_amount * 1000).split(\".\")[0]\n\n        if \"Iskraemeco\" in doc.type:\n            writeData['meterBalance'] = \"1.65.1.140.1.255:2\"\n            writeData['actionValue'] = str(doc.initial_charge_amount * 1000).split(\".\")[0]\n\n        if \"Quill\" in doc.type:\n            writeData['meterBalance'] = \"1.0.140.129.0.255:2\"\n            writeData['actionValue'] = str(doc.initial_charge_amount).split(\".\")[0]\n\n        try: \n            response = frappe.make_post_request(\n                baseURL + \"/chargeMeterV2\",\n                data = writeData\n            )\n            #frappe.throw('ssss')\n        except Exception as e:\n            frappe.throw(str(e))\n\n        doc.init_status = 1\n        doc.save(ignore_permissions=True)\n        frappe.db.commit()\n        \n        ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "sync-meter",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.390392",
  "module": "Madkour Meters APP",
  "name": "SyncMeterAPI",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "baseURL = \"https://meter01.utilities-madkour.com\"\n\nif not frappe.form_dict.doc :\n    meterName = frappe.form_dict.meter\nelse:\n    frappe.throw(frappe.form_dict.doc['name'])\n    meterName = frappe.form_dict.doc.name\ndoc = frappe.get_doc(\"Meters\",meterName)\n\nwriteData = {}\nif not doc.ip :\n    frappe.throw(_('Please Assigne SIM Card First!'))\nwriteData['name'] = doc.name\nwriteData['meterip'] = doc.ip\nwriteData['meterPort'] = doc.port\nwriteData['metertype'] = doc.type\nwriteData['meterPassword'] = \"-a Low -P '\"+doc.password+\"'\"\nwriteData['meterId'] = doc.sync_meter_id\nwriteData['meterSerial'] = doc.serial\n\ntry:\n        response = frappe.make_post_request(baseURL + \"/createMeter\", data=writeData)\n        \n        logTransaction = frappe.get_doc({\n            'doctype': 'Meter Transactions Log',\n            'reference': doc.name,\n            'action': 'Sync Meter',\n            'type': 'Success',\n            'log': str(response),  # Remove single quotes here\n            'data': str(response),  # Serialize data_dict to JSON\n        })\n        logTransaction.insert(ignore_permissions=True)\n        \n        #frappe.throw(response)\n        doc.sync_meter_id = response['meterId']\n        doc.save(ignore_permissions=True)\n        frappe.response = response\n\n        #frappe.throw(response)\nexcept Exception as e:\n    logTransaction = frappe.get_doc({\n        'doctype': 'Meter Transactions Log',\n        'reference': doc.name,\n        'action': 'Sync Meter',\n        'type': 'Failed',\n        'log': str(e),  # Remove single quotes here\n        'data': str(e),  # Serialize data_dict to JSON\n    })\n    logTransaction.insert(ignore_permissions=True)\n    \n    frappe.response['error'] = e",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "set-customer-initcharge",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:47.283372",
  "module": "Madkour Meters APP",
  "name": "setCustomerAndInitCharge",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "meterName = frappe.form_dict.meter\ndoc = frappe.get_doc(\"Meters\",meterName)\n\ncustomer = frappe.form_dict.customer\ninitCharge = frappe.form_dict.initCharge\nappno = frappe.form_dict.appno\nunit = frappe.form_dict.unit\nblock = frappe.form_dict.block\narea = frappe.form_dict.area\ncompound = frappe.form_dict.compound\nproject = frappe.form_dict.project\ncontract_type = frappe.form_dict.contract_type\ntariff_group = frappe.form_dict.tariff_group\n\nisSet = False\n\nif doc.init_status == 0 :\n    doc.customer = customer\n    doc.initial_charge_amount = initCharge\n    doc.app_no = appno\n    doc.unit = unit\n    doc.block = block\n    doc.area = area\n    doc.compound = compound\n    doc.project = project\n    doc.contract_type = contract_type\n    doc.tariff_group = tariff_group\n    \n    doc.save(ignore_permissions=True)\n    isSet = True\nelse:\n    frappe.throw('You can only assign customer if the meter is not iniated')\n\nfrappe.response['meter'] = doc\nfrappe.response['isSet'] = isSet\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Daily Long",
  "modified": "2025-03-03 00:20:47.327058",
  "module": "Madkour Meters APP",
  "name": "Get Payment Status Schedual MPGS",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Payment Refrance",
  "script": "paymentReferances = frappe.get_all(\"Meter Payment Refrance\", \n    filters={\n        \"creation\": (\">\", frappe.utils.add_to_date(frappe.utils.today(),days=-16)),\n        \"payment_source\":(\"=\", \"Payment Gateway\")\n    },  \n    fields=['name', 'payment_mid', 'payment_refrance','creation'], \n    order_by='creation desc'\n)\n\nfor paymentReferance in paymentReferances:\n    #log(paymentReferance)\n    try:\n        mid = paymentReferance.payment_mid.split(\":\")[0]\n        ref = paymentReferance.payment_refrance\n        token = 'bWVyY2hhbnQuQ0lCNzAxMzM2OmNkOWFiNDE5ZmY0OWI5Zjc3ZGIyYzBjOGRhMWE0ODlk'\n        \n        orderId = None\n        authorizationCode = None\n        \n        if not mid:\n            mid = 'CIB701336'\n        \n        if mid == 'CIB701336':\n            token = 'bWVyY2hhbnQuQ0lCNzAxMzM2OmNkOWFiNDE5ZmY0OWI5Zjc3ZGIyYzBjOGRhMWE0ODlk'\n        elif mid == 'CIB701684':\n            token = 'bWVyY2hhbnQuQ0lCNzAxNjg0OmZhODYwMmFiZTg5ZmUwMGE5OWFmN2YyNDJkNzlkYWM1'\n        elif mid == 'TESTCIB701711':\n            token = 'bWVyY2hhbnQuVEVTVENJQjcwMTcxMTo3NDRhMDRjMzUzZmM0ZjU0OGY5NDkwMzQxNDM3YzAxMQ=='\n            \n        ret = ''\n        ret = frappe.make_get_request(\"https://cibpaynow.gateway.mastercard.com/api/rest/version/70/merchant/\"+mid+\"/order/\"+ref, headers={'Authorization': 'Basic ' + token , 'Content-Type':'application/json'})\n        \n        paymentRefDoc = frappe.get_doc('Meter Payment Refrance', paymentReferance.name)\n        if paymentRefDoc.bank_status != ret['status'] : \n            paymentRefDoc.bank_update_date = frappe.utils.now()\n            paymentRefDoc.bank_status = ret['status']\n            paymentRefDoc.bank_update_object = ret\n            paymentRefDoc.bank_update_card = ret['sourceOfFunds']['provided']['card']['number']\n            \n            for transaction in ret['transaction']:\n                if 'authorizationCode' in transaction['transaction'] :\n                    authorizationCode = transaction['transaction']['authorizationCode']\n                \n                if 'order' in transaction:\n                    orderId = transaction['order']['id']\n            \n            if orderId :\n                paymentRefDoc.bank_order_id = orderId\n            \n            if authorizationCode :\n                paymentRefDoc.bank_authorization_code = authorizationCode\n            \n            if (paymentRefDoc.status == 'Pending') and  (paymentRefDoc.bank_status == 'CAPTURED'):\n                paymentRefDoc.status = 'Payment Recived'\n                if (paymentRefDoc.charge_amount == 0):\n                    paymentRefDoc.charge_amount = round((paymentRefDoc.amount - 4) - ((paymentRefDoc.amount - 4)*0.025),1)\n            paymentRefDoc.save()\n            frappe.db.commit()\n        #log(paymentRefDoc)\n\n    except Exception as exc:\n        paymentRefDoc = frappe.get_doc('Meter Payment Refrance', paymentReferance.name)\n        paymentRefDoc.bank_update_date = frappe.utils.now()\n        paymentRefDoc.bank_update_error = exc\n        paymentRefDoc.save()\n        frappe.db.commit()\n        #log(paymentRefDoc)\n        continue",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": "fawry-payment-callback",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.434654",
  "module": "Madkour Meters APP",
  "name": "Fawry Payment Callback",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Payment Refrance",
  "script": "\nfrappe.response['obj'] = frappe.form_dict.doc\nfrappe.response['message'] = \"recived\"",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "charge-meter",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:47.607317",
  "module": "Madkour Meters APP",
  "name": "Charge Meter",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "chargeMeterActionName = \"Charge Meter\"\nbaseURL = \"https://meter01.utilities-madkour.com\"\nmeterName = frappe.form_dict.meter\nparam = json.loads(frappe.form_dict.param)\nmeterChargeAmount = param['chargeAmount']\n#meterChargeType = param['chargeType']\n#meterChargeRef = param['chargeRef']\nrf_name = frappe.form_dict.rf_name\n\nmeterPaymentRef = frappe.get_doc(\"Meter Payment Refrance\", rf_name)\nmeterPaymentRefOldStatus = meterPaymentRef.status\nif not meterPaymentRef:\n    frappe.throw(_('Something went wrong!'))\n\nif ('Success' in meterPaymentRefOldStatus) or ('Manually' in meterPaymentRefOldStatus):\n    frappe.throw(_('You can not perform this acction on success transaction!'))\n\nif (meterPaymentRefOldStatus == 'Charge Failed') or (meterPaymentRefOldStatus == 'Charge Retry Failed') :\n    if meterPaymentRef.charge_amount > 0:\n        meterChargeAmount = meterPaymentRef.charge_amount\n        chargeMeterActionName = \"Online Charge Retry\"\n    else:\n        frappe.throw(_('Can not retry zero value!'))\n    \n\ndoc = frappe.get_doc(\"Meters\", meterPaymentRef.meter)\nwriteData = {}\n\nwriteData['name'] = doc.name\nwriteData['meterip'] = doc.ip\nwriteData['meterPort'] = doc.port\nwriteData['metertype'] = doc.type\nwriteData['meterPassword'] = \"-a Low -P \" + doc.password\nwriteData['meterId'] = doc.sync_meter_id\nwriteData['meterSerial'] = doc.serial\nwriteData['meterAction'] = 'AddCredit'\nwriteData['actionValue'] = int(meterChargeAmount * 1000)\n\n\nif \"Electrometer\" in doc.type:\n    writeData['meterBalance'] = \"0.0.19.0.0.255:5\"\nif \"Iskraemeco\" in doc.type:\n    writeData['meterBalance'] = \"1.65.1.140.1.255:2\"\nif \"WaterMeter-Iskraemeco\" in doc.type:\n    writeData['meterBalance'] = \"0.0.19.10.0.255:2\"\nif \"Quill\" in doc.type:\n    writeData['meterBalance'] = \"1.0.140.129.0.255:2\"\n    writeData['actionValue'] = float(meterChargeAmount)\n\ntry:\n    meterPaymentRef.status = 'Payment Recived'\n    meterPaymentRef.details = str(writeData)\n    meterPaymentRef.session_log = str(frappe.form_dict)\n    if \":\" not in meterPaymentRef.payment_mid: \n        meterPaymentRef.payment_mid = meterPaymentRef.payment_mid + ':' + frappe.session.user\n    \n    if meterPaymentRefOldStatus != 'Charge Failed':\n        meterPaymentRef.save(ignore_permissions=True)\n    \n    response = frappe.make_post_request(baseURL + \"/chargeMeterV2\", data=writeData)\n    \n    isChargeFailed = None\n    try:\n       isChargeFailed = response['chargeFailed']\n    except:\n        isChargeFailed = None\n    \n    if not isChargeFailed:\n        meterPaymentRef.status = 'Success'\n        \n        if meterPaymentRefOldStatus == 'Charge Failed':\n            meterPaymentRef.status = 'Success Retry'\n            \n        meterPaymentRef.session_log = json.dumps(response)\n        #meterPaymentRef.charge_token = response['actionToken'] if 'actionToken' in response else None\n    \n        meterPaymentRef.save(ignore_permissions=True)\n        \n        #  TODO Create Meter Transaction LOG Success\n        frappe.get_doc({\n            'doctype': 'Meter Transactions Log',\n            'reference': meterPaymentRef.meter,\n            'action': chargeMeterActionName,\n            'type': 'Success',\n            'log': json.dumps(response),\n            'data': json.dumps(writeData)\n        }).insert(ignore_permissions=True)\n        \n        if \"Electrometer\" in doc.type:\n            if 'chargeAmount' in response:\n                response['chargeAmount'] = float(response['chargeAmount'])/1000\n            if 'currentBalance' in response:\n                response['currentBalance'] = float(response['currentBalance'])/1000\n            if 'newBalance' in response:\n                response['newBalance'] = float(response['newBalance'])/1000\n        if \"Iskraemeco\" in doc.type:\n            if 'chargeAmount' in response:\n                response['chargeAmount'] = float(response['chargeAmount'])/1000\n            if 'currentBalance' in response:\n                response['currentBalance'] = float(response['currentBalance'])/1000\n            if 'newBalance' in response:\n                response['newBalance'] = float(response['newBalance'])/1000\n        if \"Quill\" in doc.type:\n            if 'chargeAmount' in response:\n                response['chargeAmount'] = float(response['chargeAmount'])\n            if 'currentBalance' in response:\n                response['currentBalance'] = float(response['currentBalance'])/100\n            if 'newBalance' in response:\n                response['newBalance'] = float(response['newBalance'])/100\n    else:\n        frappe.throw('Failed: Failed')\n        frappe.status = 500\n        meterPaymentRef.status = 'Charge Failed'\n        \n        if meterPaymentRefOldStatus == 'Charge Failed':\n            meterPaymentRef.status = 'Charge Retry Failed'\n        \n        #meterPaymentRef.charge_token = response['actionToken'] if 'actionToken' in response else None\n        meterPaymentRef.details = str(response)\n        # error_response = getattr(e, 'response', None)\n    \n        meterPaymentRef.save(ignore_permissions=True)\n\n        frappe.response['error'] = str(response)\n    \n        d = frappe.get_doc({\n            'doctype': 'Meter Transactions Log',\n            'reference': meterPaymentRef.meter,\n            'action': chargeMeterActionName,\n            'type': 'Failed',\n            'log': str(response),\n            'data': str(writeData)\n        })\n\n        d.insert(ignore_permissions=True)\n\n        frappe.msgprint(\"Something wrong with this transaction - Charge Error\")\n        \n    frappe.response['response'] = response\nexcept Exception as e:\n\n    frappe.status = 500\n    \n    meterPaymentRef.status = 'Charge Failed'\n    if meterPaymentRefOldStatus == 'Charge Failed':\n        meterPaymentRef.status = 'Charge Retry Failed'\n        \n    meterPaymentRef.details = str(e)\n    # error_response = getattr(e, 'response', None)\n\n    meterPaymentRef.save(ignore_permissions=True)\n    frappe.response['error'] = str(e)\n\n    d = frappe.get_doc({\n        'doctype': 'Meter Transactions Log',\n        'reference': meterPaymentRef.meter,\n        'action': chargeMeterActionName,\n        'type': 'Failed',\n        'log': str(e),\n        'data': str(writeData)\n    })\n\n    d.insert(ignore_permissions=True)\n\n    frappe.msgprint(\"Something wrong with this transaction\")\nfrappe.response['paymentReferance'] = meterPaymentRef\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Weekly",
  "modified": "2025-03-03 00:20:48.341625",
  "module": "Madkour Meters APP",
  "name": "Auto Sync Meter",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "baseURL = \"https://meter01.utilities-madkour.com\"\nmeters = frappe.db.get_list('Meters',\n    filters={\n        'sync_meter_id': [\"is\", \"not set\"],\n        'ip': [\"is\", \"set\"]\n    },\n    fields=['name'],\n   # as_list=True\n)\n\nfor doc in meters:\n    #log(doc)\n\n    meterName = doc.name\n    doc = frappe.get_doc(\"Meters\",meterName)\n    \n    writeData = {}\n    if not doc.ip :\n        frappe.throw(_('Please Assigne SIM Card First!'))\n    writeData['name'] = doc.name\n    writeData['meterip'] = doc.ip\n    writeData['meterPort'] = doc.port\n    writeData['metertype'] = doc.type\n    writeData['meterPassword'] = \"-a Low -P '\"+doc.password+\"'\"\n    writeData['meterId'] = doc.sync_meter_id\n    writeData['meterSerial'] = doc.serial\n    \n    try:\n            response = frappe.make_post_request(baseURL + \"/createMeter\", data=writeData)\n            \n            logTransaction = frappe.get_doc({\n                'doctype': 'Meter Transactions Log',\n                'reference': doc.name,\n                'action': 'Sync Meter',\n                'type': 'Success',\n                'log': str(response),  # Remove single quotes here\n                'data': str(response),  # Serialize data_dict to JSON\n            })\n            logTransaction.insert(ignore_permissions=True)\n            \n            #frappe.throw(response)\n            doc.sync_meter_id = response['meterId']\n            doc.save(ignore_permissions=True)\n            frappe.db.commit()\n    \n            #frappe.throw(response)\n    except Exception as e:\n        logTransaction = frappe.get_doc({\n            'doctype': 'Meter Transactions Log',\n            'reference': doc.name,\n            'action': 'Sync Meter',\n            'type': 'Failed',\n            'log': str(e),  # Remove single quotes here\n            'data': str(e),  # Serialize data_dict to JSON\n        })\n        logTransaction.insert(ignore_permissions=True)\n        frappe.db.commit()",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": "load-meter-profile",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.300744",
  "module": "Madkour Meters APP",
  "name": "Load Meter Profile",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters",
  "script": "baseURL = \"https://meter01.utilities-madkour.com\"\n\nif not frappe.form_dict.doc :\n    meterName = frappe.form_dict.meter\nelse:\n    frappe.throw(frappe.form_dict.doc['name'])\n    meterName = frappe.form_dict.doc.name\ndoc = frappe.get_doc(\"Meters\",meterName)\n\nwriteData = {}\nif not doc.ip :\n    frappe.throw(_('Please Assigne SIM Card First!'))\nwriteData['name'] = doc.name\nwriteData['meterip'] = doc.ip\nwriteData['meterPort'] = doc.port\nwriteData['metertype'] = doc.type\nwriteData['meterPassword'] = \"-a Low -P '\"+doc.password+\"'\"\nwriteData['meterId'] = doc.sync_meter_id\nwriteData['meterSerial'] = doc.serial\n\ntry:\n        response = frappe.make_post_request(baseURL + \"/loadProfiles\", data=writeData)\n        \n        logTransaction = frappe.get_doc({\n            'doctype': 'Meter Transactions Log',\n            'reference': doc.name,\n            'action': 'Load Meter Profiles',\n            'type': 'Success',\n            'log': str(response),  # Remove single quotes here\n            'data': str(response),  # Serialize data_dict to JSON\n        })\n        logTransaction.insert(ignore_permissions=True)\n        \n        frappe.response = response\n\n        #frappe.throw(response)\nexcept Exception as e:\n    logTransaction = frappe.get_doc({\n        'doctype': 'Meter Transactions Log',\n        'reference': doc.name,\n        'action': 'Load Meter Profiles',\n        'type': 'Failed',\n        'log': str(e),  # Remove single quotes here\n        'data': str(e),  # Serialize data_dict to JSON\n    })\n    logTransaction.insert(ignore_permissions=True)\n    \n    frappe.response['error'] = e",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "markPaymentAsSuccessManually",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.262876",
  "module": "Madkour Meters APP",
  "name": "Mark Payment As Success Manually",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Payment Refrance",
  "script": "MeterPaymentReferanceName = frappe.form_dict.payment_referance\n\nMeterPaymentReferance = frappe.get_doc(\"Meter Payment Refrance\",MeterPaymentReferanceName)\n\nif (MeterPaymentReferance.status == 'Charge Failed' or MeterPaymentReferance.status == 'Charge Retry Failed' ):\n    MeterPaymentReferance.status = 'Manuall Success'\n    MeterPaymentReferance.save(ignore_permissions=True)\nelse:\n    frappe.throw(_(\"Payment need to be in charge failed status\"))",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.224634",
  "module": "Madkour Meters APP",
  "name": "Balance Missmatch Case",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Payment Refrance",
  "script": "docBeforeSave = doc.get_doc_before_save()\nif doc.status == 'Charge Failed' or doc.status == 'Charge Retry Failed':# docBeforeSave.status == 'Pending' :\n    if 'balance mismatch' in doc.session_log:\n        if 'newBalance' in doc.session_log:\n            doc.status = 'Success Retry'\n            doc.save()\n    \n    #currentPaymentRef = frappe.get_doc('Meter Payment Referance',doc.id)\n    #currentPaymentRef.payment_referance =  paymentDoc.id\n    #currentPaymentRef.save()\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "initiate-payment-checkout",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.125025",
  "module": "Madkour Meters APP",
  "name": "initiate-payment-checkout",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "\nmeterName = frappe.form_dict.meter\namount = float(frappe.form_dict.amount)\ncustomerUser = frappe.form_dict.customer\nmid = 'TESTCIB701711'\ntoken = 'bWVyY2hhbnQuVEVTVENJQjcwMTcxMTo3NDRhMDRjMzUzZmM0ZjU0OGY5NDkwMzQxNDM3YzAxMQ=='\nref = ''\n\nmeterPaymentReferance = frappe.get_doc({\n    'doctype': 'Meter Payment Refrance',\n    'payfor':customerUser,\n    'meter':meterName,\n    'payment_refrance':'test',\n    'status':'Todo',\n    'amount':4 + (amount * 1.025),\n    'payment_mid': mid\n})\n#meterPaymentReferance.save()\n\nuuid =  frappe.make_get_request(\"https://www.uuidgenerator.net/api/version4\",headers={'Accept':'application/json'})\nuuid = uuid[0]\nfrappe.response['uuid'] = uuid\nfrappe.response['data'] = {\n            \"apiOperation\": \"INITIATE_CHECKOUT\",\n            \"interaction\": {\n                \"operation\": \"PURCHASE\",\n                \"merchant\": {\n                    \"name\": \"MADKOUR FOR FACILITY MANAGEMENT\",\n                },\n                \"returnUrl\": \"http://localhost:3000/api/payment/return\"\n            },\n            \"order\": {\n                \"id\": uuid,\n                \"amount\": amount,\n                \"currency\": \"EGP\",\n                \"description\": \"Order of interest\"\n            }\n        }\ntry:\n    ret = frappe.make_post_request(\"https://cibpaynow.gateway.mastercard.com/api/rest/version/70/merchant/\"+mid+\"/session\" \n        ,data={\n            \"apiOperation\": \"INITIATE_CHECKOUT\",\n            \"interaction\": {\n                \"operation\": \"PURCHASE\",\n                \"merchant\": {\n                    \"name\": \"MADKOUR FOR FACILITY MANAGEMENT\",\n                },\n                \"returnUrl\": \"http://localhost:3000/api/payment/return\"\n            },\n            \"order\": {\n                \"id\": uuid,\n                \"amount\": amount,\n                \"currency\": \"EGP\",\n                \"description\": \"Order of interest\"\n            }\n        }\n        ,headers={'Authorization': 'Basic ' + token , 'Content-Type':'application/json'})\n    \n    frappe.response['message'] = ret\n    #frappe.throw(json.dumps(ret))\nexcept Exception as exc:\n    frappe.response['message'] = exc\n    # frappe.throw(exc)\n\n#ret = frappe.make_get_request(\"https://cibpaynow.gateway.mastercard.com/api/rest/version/70/merchant/\"+mid+\"/order/\"+ref, headers={'Authorization': 'Basic ' + token , 'Content-Type':'application/json'})\n\nfrappe.response['response'] = meterPaymentReferance",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:48.067584",
  "module": "Madkour Meters APP",
  "name": "Refuse",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Payment Refrance",
  "script": "if doc.payment_source != \"Payment Gateway\":\n    oldDoc = frappe.db.get_list(\"Meter Payment Refrance\",\n        filters={\n             'meter':doc.meter,\n             'creation': ['>',frappe.utils.add_to_date(frappe.utils.now(), minutes=-3)]\n        },\n        fields=['name'],\n        start=0,\n        page_length=1,\n        as_list=False\n    )\n    \n    if oldDoc:\n        frappe.throw(_('There is transaction at the minute on this meter:' + doc.meter +',please wait for 4 min befor any new transaction!'))\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Hourly Long",
  "modified": "2025-03-03 00:20:47.992233",
  "module": "Madkour Meters APP",
  "name": "SyncBillsSchedual",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meters Invoice",
  "script": "meters = frappe.db.get_list('Meters',\n                filters={\n                    'type': 'ElectricalMeter-Quill',\n                    'sync_meter_id': [\"is\", \"set\"],\n                    'customer': [\"is\", \"set\"]\n                },\n                order_by='creation desc',\n                start=int(frappe.utils.now().split(' ')[1].split(':')[0])*200,\n                page_length=200\n                )\n\nfor meterObj in meters :\n    meter = frappe.get_doc('Meters',meterObj.name)\n    \n    billingParamSet = frappe.get_doc('Meter Type Param Set', {'param_name':'Billing Profile'})\n    \n    billingObis = None\n    for paramMeterType in billingParamSet.type_param:\n        meterTypeObject = frappe.get_doc('Meter Type', paramMeterType.meter_type)\n        if meterTypeObject.type_name == meter.type:\n            billingObis = paramMeterType.obis\n            \n    if billingObis :\n    \n        actionData={\n            'meterip' : meter.ip,\n            'meterPort' : meter.port,\n            'metertype' : meter.type,\n            'meterPassword' : \"-a Low -P \"+meter.password,\n            'meterId' : meter.sync_meter_id,\n            'meterAction' : \"queryProfileByDate\",\n            'meterSerial' : meter.serial,\n            'fromDate':frappe.utils.nowdate(),\n            'toDate' : frappe.utils.nowdate(),\n            'actionValue': billingObis + \":\" + \"01012010000001\" + \"/\" + \"01012025000001\"\n        }\n        \n        try:\n            response = frappe.make_post_request('http://192.168.0.100:1880' + '/meterActionV2', data=actionData)\n            for key in response:\n                rawBill = response[key]\n                billDate = frappe.utils.getdate(response[key][billingObis+':0.0.1.0.0.255:2'])\n                bill = frappe.get_doc({\n                    'doctype': 'Meters Invoice',\n                    'meter':meter.name,\n                    'bill_date': billDate,\n                    'bill_amount': int(response[key][billingObis+':1.0.0.29.0.255:2']) / 100,\n                    'available_credit': int(response[key][billingObis+':1.0.140.129.0.255:2']) / 100,\n                    'max_demand': int(response[key][billingObis+':1.0.1.6.0.255:2']) / 100,\n                    'total_import': int(response[key][billingObis+':1.0.1.29.0.255:2']) / 1000,\n                    'total_consumption': int(response[key][billingObis+':1.0.1.8.0.255:2']) / 100\n                    \n                })\n        \n                billExists = frappe.db.get_list('Meters Invoice',\n                    filters={\n                        'bill_date': billDate,\n                        'meter': meter.name\n                    }\n                )\n                if not billExists:\n                    bill.insert()\n                    frappe.db.commit()\n        except Exception as e:\n           pass\n    ",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:47.497863",
  "module": "Madkour Meters APP",
  "name": "Auto Create Missed Payment Entries",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "MeterPaymentReferancedocs = frappe.db.get_list('Meter Payment Refrance',\n    filters={\n        'status': ['in',['Success','Payment Recived','Charge Failed','Success Retry','Charge Retry Failed','Manuall Success']],\n        'payment_referance': [\"is\", \"not set\"],\n        'creation' : [\">\",\"2024-08-17\"],\n        'amount': [\">\", 0]\n    },\n    fields=['name', 'amount', 'payment_mid', 'payment_refrance', 'creation' , 'payment_source', 'meter'],\n    order_by='creation desc',\n    start=0,\n    page_length=100,\n    #as_list=True\n)\n\nfor MeterPaymentReferancedoc in MeterPaymentReferancedocs :\n    \n    doc = frappe.get_doc('Meter Payment Refrance',MeterPaymentReferancedoc.name)\n    \n    if not doc.payment_referance:\n        \n        meterDoc = frappe.get_doc('Meters',doc.meter)\n        \n        paymentData = {\n        'doctype': 'Payment Entry',\n        'payment_type': 'Receive',\n        'party_type' : 'Customer',\n        'party': meterDoc.customer,\n        'paid_to': '1110 - Cash - MU',\n        'received_amount': doc.amount,\n        'paid_amount': doc.amount,\n        'reference_no': doc.payment_mid + ':' + doc.payment_refrance,\n        'mode_of_payment': 'Credit Card',\n        'project' : meterDoc.project,\n        'posting_date' : doc.creation,\n        'casher':doc.owner\n        }\n        \n        if doc.payment_source == 'Station Cash':\n            paymentData['mode_of_payment'] = 'Cash'\n        \n        if doc.payment_source == 'Station Card':\n            paymentData['mode_of_payment'] = 'Credit Card'\n        \n        paymentDoc = frappe.get_doc(paymentData)\n        \n        paymentDoc = paymentDoc.save()\n        \n        doc.payment_referance =  paymentDoc.name\n        doc.save()\n        frappe.db.commit()\n        #log(doc)",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 00:20:47.391406",
  "module": "Madkour Meters APP",
  "name": "Assigne Customer to Payment Referance",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Payment Refrance",
  "script": "if (not doc.customer) and (doc.payfor):\n    meterOnlineUser = frappe.get_doc(\"Meter Online Payment User\",  doc.payfor)\n    \n    if meterOnlineUser :\n        doc.customer = meterOnlineUser.customer_name_link\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Hourly",
  "modified": "2025-03-03 00:20:47.091854",
  "module": "Madkour Meters APP",
  "name": "Update Pyment Recived to Charge Failed",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Meter Payment Refrance",
  "script": "paymentReferances = frappe.get_all(\"Meter Payment Refrance\", \n    filters={\n        \"status\": (\"=\", \"Payment Recived\"),\n        \"bank_status\": (\"=\", \"CAPTURED\"),\n        \"charge_amount\": (\">\", \"0\"),\n        \"payment_source\":(\"=\", \"Payment Gateway\")\n    },  \n    fields=['name', 'payment_mid', 'payment_refrance','creation'], \n    order_by='creation desc'\n)\n\nfor paymentReferance in paymentReferances:\n    #log(paymentReferance)\n    try:\n        paymentRefDoc = frappe.get_doc('Meter Payment Refrance', paymentReferance.name)\n        if paymentRefDoc: \n            paymentRefDoc.status = \"Charge Failed\"\n            paymentRefDoc.save()\n            frappe.db.commit()\n\n\n    except Exception as exc:\n        continue",
  "script_type": "Scheduler Event"
 }
]